{"version":3,"sources":["MasterChart.js","AllCharts.js","App.js","reportWebVitals.js","index.js","mungingUtils.js"],"names":["MasterChart","data","title","series","precision","options","plotOptions","line","marker","enabled","tooltip","shared","formatter","yourDate","Date","this","x","offset","getTimezoneOffset","retval","getTime","toISOString","split","points","map","name","y","toFixed","join","chart","zoomType","text","xAxis","type","yAxis","linkedTo","opposite","highcharts","Highcharts","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","population","Israel","Canada","Ontario","Ottawa","OttawaOPH","lastUpdated","lastDate","country_data","key","Math","max","date","substring","AllCharts","useState","ourWorldData","setOurWorldData","ontarioData","setOntarioData","ottawaData","setOttawaData","ophData","setOphData","updated","setUpdated","getOurWorldData","a","storage","storageRef","ref","child","getDownloadURL","url","xhr","XMLHttpRequest","responseType","onload","response","open","send","getOntarioData","getOttawaData","getOPHData","useEffect","countries","local","className","class","c","chartData","startsWith","App","style","textAlign","margin","href","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","exports","dataField","area","startDate","munged","push"],"mappings":"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","file":"static/js/main.f71325ed.chunk.js","sourcesContent":["import Highcharts from \"highcharts\";\nimport HighchartsReact from \"highcharts-react-official\";\nimport React from \"react\";\n\nfunction MasterChart(data, title, series, precision = 1) {\n  const options = {\n    plotOptions: {\n      line: {\n        marker: {\n          enabled: false,\n        },\n      },\n    },\n    tooltip: {\n      shared: true,\n      formatter: function () {\n        var yourDate = new Date(this.x);\n        const offset = yourDate.getTimezoneOffset();\n        yourDate = new Date(yourDate.getTime() + offset * 60 * 1000);\n        const date = yourDate.toISOString().split(\"T\")[0];\n        var retval = date + \"<br>\";\n        retval += this.points\n          .map((x) => `${x.series.name}: ${x.y.toFixed(precision)}%`)\n          .join(\"<br>\");\n        return retval;\n      },\n    },\n    chart: {\n      zoomType: \"x\",\n    },\n    title: {\n      text: title,\n    },\n    xAxis: {\n      type: \"datetime\",\n    },\n    yAxis: [\n      {\n        title: {\n          text: \"Percentage covered\",\n        },\n      },\n      {\n        title: {\n          text: \" \",\n        },\n        linkedTo: 0,\n        opposite: true,\n      },\n    ],\n    series: series,\n  };\n  return <HighchartsReact highcharts={Highcharts} options={options} />;\n}\n\nexport default MasterChart;\n","import \"./AllCharts.css\";\nimport React, { useState, useEffect } from \"react\";\nimport firebase from \"firebase/app\";\nimport \"firebase/storage\";\nimport MasterChart from \"./MasterChart\";\nimport { chartData } from \"./mungingUtils\";\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyCYOlqH5i8Q_nN_5i91JvUY3qU4Blan9Uo\",\n  authDomain: \"first-dose-eb9bd.firebaseapp.com\",\n  projectId: \"first-dose-eb9bd\",\n  storageBucket: \"first-dose-eb9bd.appspot.com\",\n  messagingSenderId: \"212541290476\",\n  appId: \"1:212541290476:web:03a13b63cb5280de87b2c9\",\n  measurementId: \"G-2CY2T47KWQ\",\n};\nfirebase.initializeApp(firebaseConfig);\n\nconst population = {\n  Israel: 8652167,\n  \"United Kingdom\": 67893379,\n  \"United States\": 334438269,\n  Canada: 37746527,\n  Ontario: 14745040,\n  Ottawa: 1060658,\n  OttawaOPH: 1060658,\n};\n\nconst lastUpdated = (data) => {\n  var lastDate = null;\n  const country = \"Canada\";\n  const country_data = data[country] || {};\n  for (const key in country_data) {\n    if (country_data[key] !== null) {\n      const x = country_data[key];\n      lastDate = lastDate ? Math.max(lastDate, x.date) : x.date;\n    }\n  }\n  lastDate = new Date(lastDate);\n  return lastDate.toISOString().substring(0, 10);\n};\n\nfunction AllCharts() {\n  const [ourWorldData, setOurWorldData] = useState([]);\n  const [ontarioData, setOntarioData] = useState([]);\n  const [ottawaData, setOttawaData] = useState([]);\n  const [ophData, setOphData] = useState([]);\n  const [updated, setUpdated] = useState([]);\n\n  const getOurWorldData = async () => {\n    const storage = firebase.storage();\n    const storageRef = storage.ref();\n    const url = await storageRef.child(\"ourWorldInData.json\").getDownloadURL();\n    var xhr = new XMLHttpRequest();\n    xhr.responseType = \"json\";\n    xhr.onload = async () => {\n      var data = await xhr.response;\n      setOurWorldData(data);\n      setUpdated(lastUpdated(data));\n    };\n    xhr.open(\"GET\", url);\n    xhr.send();\n  };\n\n  const getOntarioData = async () => {\n    const storage = firebase.storage();\n    const storageRef = storage.ref();\n    const url = await storageRef\n      .child(\"covid19_tracker_on.json\")\n      .getDownloadURL();\n    var xhr = new XMLHttpRequest();\n    xhr.responseType = \"json\";\n    xhr.onload = async () => {\n      var data = await xhr.response;\n      setOntarioData(data);\n    };\n    xhr.open(\"GET\", url);\n    xhr.send();\n  };\n\n  const getOttawaData = async () => {\n    const storage = firebase.storage();\n    const storageRef = storage.ref();\n    const url = await storageRef\n      .child(\"covid19_tracker_ottawa.json\")\n      .getDownloadURL();\n    var xhr = new XMLHttpRequest();\n    xhr.responseType = \"json\";\n    xhr.onload = async () => {\n      var data = await xhr.response;\n      setOttawaData(data);\n    };\n    xhr.open(\"GET\", url);\n    xhr.send();\n  };\n\n  const getOPHData = async () => {\n    const storage = firebase.storage();\n    const storageRef = storage.ref();\n    const url = await storageRef.child(\"openOttawa.json\").getDownloadURL();\n    var xhr = new XMLHttpRequest();\n    xhr.responseType = \"json\";\n    xhr.onload = async () => {\n      var data = await xhr.response;\n      setOphData({ OttawaOPH: data.Ottawa });\n    };\n    xhr.open(\"GET\", url);\n    xhr.send();\n  };\n\n  useEffect(() => {\n    getOurWorldData();\n    getOntarioData();\n    getOttawaData();\n    getOPHData();\n  }, []);\n\n  const data = {\n    ...ourWorldData,\n    ...ontarioData,\n    ...ottawaData,\n    ...ophData,\n  };\n\n  const countries = [\"Israel\", \"United Kingdom\", \"United States\", \"Canada\"];\n  const local = [\"Canada\", \"Ontario\", \"Ottawa\"];\n\n  return (\n    <div className=\"App\">\n      <h2>Countries</h2>\n      <div class=\"cards\">\n        <div class=\"card\">\n          {MasterChart(\n            data,\n            \"First Dose\",\n            countries.map((c) => ({\n              name: c,\n              data: chartData(data, \"peopleVaccinated\", c, population[c]),\n            }))\n          )}\n        </div>\n\n        <div class=\"card\">\n          {MasterChart(\n            data,\n            \"Fully Vaccinated\",\n            countries.map((c) => ({\n              name: c,\n              data: chartData(data, \"peopleFullyVaccinated\", c, population[c]),\n            }))\n          )}\n        </div>\n      </div>\n\n      <h2>Canada / Ontario / Ottawa</h2>\n\n      <div class=\"cards\">\n        <div class=\"card\">\n          {MasterChart(\n            data,\n            \"First Dose\",\n            local.map((c) => ({\n              name: c,\n              data: chartData(data, \"peopleVaccinated\", c, population[c]),\n            }))\n          )}\n        </div>\n        <div class=\"card\">\n          {MasterChart(\n            data,\n            \"Fully Vaccinated\",\n            local.map((c) => ({\n              name: c,\n              data: chartData(data, \"peopleFullyVaccinated\", c, population[c]),\n            }))\n          )}\n        </div>\n      </div>\n\n      <h2>Active cases</h2>\n\n      {MasterChart(\n        data,\n        \"Active cases\",\n        [\"Ontario\", \"OttawaOPH\"].map((c) => ({\n          name: c.startsWith(\"Ottawa\") ? \"Ottawa\" : c,\n          data: chartData(data, \"activeCases\", c, population[c], 0),\n        })),\n        2\n      )}\n\n      <p> Data last updated at {updated}</p>\n    </div>\n  );\n}\n\nexport default AllCharts;\n","import \"./App.css\";\nimport AllCharts from \"./AllCharts\";\n\nfunction App() {\n  return (\n    <div style={{ textAlign: \"center\" }}>\n      <div style={{ margin: 50 }} className=\"App\">\n        <AllCharts />\n      </div>\n      <p>\n        Data from{\" \"}\n        <a href=\"https://github.com/owid/covid-19-data\">Our World in Data</a>,{\" \"}\n        <a href=\"https://api.covid19tracker.ca\">COVID-19 Tracker Canada</a>,\n        {\" and \"}\n        <a href=\"https://open.ottawa.ca/\">Open Ottawa</a>.\n      </p>\n      <p>\n        Code in <a href=\"https://github.com/sastels/first-dose\">Github</a>.\n      </p>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","const chartData = (\n  data,\n  dataField,\n  area,\n  population,\n  startDate = 1608422400000 // 2020-12-20\n) => {\n  const country_data = data[area] || {};\n  var munged = [];\n  for (const key in country_data) {\n    if (country_data[key] !== null) {\n      const x = country_data[key];\n      if (x.date >= startDate) {\n        munged.push([x.date, (x[dataField] * 100) / population]);\n      }\n    }\n  }\n  return munged;\n};\n\nexports.chartData = chartData;\n"],"sourceRoot":""}
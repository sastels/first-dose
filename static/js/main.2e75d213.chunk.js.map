{"version":3,"sources":["MasterChart.js","AllCharts.js","App.js","reportWebVitals.js","index.js","mungingUtils.js"],"names":["MasterChart","data","title","series","options","plotOptions","line","marker","enabled","tooltip","shared","formatter","yourDate","Date","this","x","offset","getTimezoneOffset","retval","getTime","toISOString","split","points","map","name","y","toFixed","join","chart","zoomType","text","xAxis","type","yAxis","linkedTo","opposite","highcharts","Highcharts","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","population","Israel","Canada","Ontario","lastUpdated","lastDate","country_data","key","Math","max","date","substring","AllCharts","useState","ourWorldData","setOurWorldData","trackerData","setTrackerData","updated","setUpdated","getOurWorldData","a","storage","storageRef","ref","child","getDownloadURL","url","xhr","XMLHttpRequest","responseType","onload","response","open","send","getTrackerData","useEffect","countries","local","className","c","chartData","App","style","textAlign","margin","href","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","exports","dataField","area","munged","push"],"mappings":"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","file":"static/js/main.2e75d213.chunk.js","sourcesContent":["import Highcharts from \"highcharts\";\nimport HighchartsReact from \"highcharts-react-official\";\nimport React from \"react\";\n\nfunction MasterChart(data, title, series) {\n  const options = {\n    plotOptions: {\n      line: {\n        marker: {\n          enabled: false,\n        },\n      },\n    },\n    tooltip: {\n      shared: true,\n      formatter: function () {\n        var yourDate = new Date(this.x);\n        const offset = yourDate.getTimezoneOffset();\n        yourDate = new Date(yourDate.getTime() + offset * 60 * 1000);\n        const date = yourDate.toISOString().split(\"T\")[0];\n        var retval = date + \"<br>\";\n        retval += this.points\n          .map((x) => `${x.series.name}: ${x.y.toFixed(1)}%`)\n          .join(\"<br>\");\n        return retval;\n      },\n    },\n    chart: {\n      zoomType: \"x\",\n    },\n    title: {\n      text: title,\n    },\n    xAxis: {\n      type: \"datetime\",\n    },\n    yAxis: [\n      {\n        title: {\n          text: \"Percentage covered\",\n        },\n      },\n      {\n        title: {\n          text: \" \",\n        },\n        linkedTo: 0,\n        opposite: true,\n      },\n    ],\n    series: series,\n  };\n  return <HighchartsReact highcharts={Highcharts} options={options} />;\n}\n\nexport default MasterChart;\n","import React, { useState, useEffect } from \"react\";\nimport firebase from \"firebase/app\";\nimport \"firebase/storage\";\nimport MasterChart from \"./MasterChart\";\nimport { chartData } from \"./mungingUtils\";\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyCYOlqH5i8Q_nN_5i91JvUY3qU4Blan9Uo\",\n  authDomain: \"first-dose-eb9bd.firebaseapp.com\",\n  projectId: \"first-dose-eb9bd\",\n  storageBucket: \"first-dose-eb9bd.appspot.com\",\n  messagingSenderId: \"212541290476\",\n  appId: \"1:212541290476:web:03a13b63cb5280de87b2c9\",\n  measurementId: \"G-2CY2T47KWQ\",\n};\nfirebase.initializeApp(firebaseConfig);\n\nconst population = {\n  Israel: 8652167,\n  \"United Kingdom\": 67893379,\n  \"United States\": 334438269,\n  Canada: 37746527,\n  Ontario: 14745040,\n};\n\nconst lastUpdated = (data) => {\n  var lastDate = null;\n  const country = \"Canada\";\n  const country_data = data[country] || {};\n  for (const key in country_data) {\n    if (country_data[key] !== null) {\n      const x = country_data[key];\n      lastDate = lastDate ? Math.max(lastDate, x.date) : x.date;\n    }\n  }\n  lastDate = new Date(lastDate);\n  return lastDate.toISOString().substring(0, 10);\n};\n\nfunction AllCharts() {\n  const [ourWorldData, setOurWorldData] = useState([]);\n  const [trackerData, setTrackerData] = useState([]);\n  const [updated, setUpdated] = useState([]);\n\n  const getOurWorldData = async () => {\n    const storage = firebase.storage();\n    const storageRef = storage.ref();\n    const url = await storageRef.child(\"ourWorldInData.json\").getDownloadURL();\n    var xhr = new XMLHttpRequest();\n    xhr.responseType = \"json\";\n    xhr.onload = async () => {\n      var data = await xhr.response;\n      setOurWorldData(data);\n      setUpdated(lastUpdated(data));\n    };\n    xhr.open(\"GET\", url);\n    xhr.send();\n  };\n\n  const getTrackerData = async () => {\n    const storage = firebase.storage();\n    const storageRef = storage.ref();\n    const url = await storageRef\n      .child(\"covid19_tracker_on.json\")\n      .getDownloadURL();\n    var xhr = new XMLHttpRequest();\n    xhr.responseType = \"json\";\n    xhr.onload = async () => {\n      var data = await xhr.response;\n      setTrackerData(data);\n    };\n    xhr.open(\"GET\", url);\n    xhr.send();\n  };\n\n  useEffect(() => {\n    getOurWorldData();\n    getTrackerData();\n  }, []);\n\n  const data = {\n    ...ourWorldData,\n    ...trackerData,\n  };\n\n  const countries = [\"Israel\", \"United Kingdom\", \"United States\", \"Canada\"];\n  const local = [\"Canada\", \"Ontario\"];\n\n  return (\n    <div className=\"App\">\n      <h2> Canada vs other countries</h2>\n      {MasterChart(\n        data,\n        \"First Dose\",\n        countries.map((c) => ({\n          name: c,\n          data: chartData(data, \"peopleVaccinated\", c, population[c]),\n        }))\n      )}\n\n      {MasterChart(\n        data,\n        \"Fully Vaccinated\",\n        countries.map((c) => ({\n          name: c,\n          data: chartData(data, \"peopleFullyVaccinated\", c, population[c]),\n        }))\n      )}\n\n      <h2> Canada / Ontario</h2>\n      {MasterChart(\n        data,\n        \"First Dose\",\n        local.map((c) => ({\n          name: c,\n          data: chartData(data, \"peopleVaccinated\", c, population[c]),\n        }))\n      )}\n\n      {MasterChart(\n        data,\n        \"Fully Vaccinated\",\n        local.map((c) => ({\n          name: c,\n          data: chartData(data, \"peopleFullyVaccinated\", c, population[c]),\n        }))\n      )}\n\n      <p> Data last updated at {updated}</p>\n    </div>\n  );\n}\n\nexport default AllCharts;\n","import \"./App.css\";\nimport AllCharts from \"./AllCharts\";\n\nfunction App() {\n  return (\n    <div style={{ textAlign: \"center\" }}>\n      <div style={{ margin: 50 }} className=\"App\">\n        <AllCharts />\n      </div>\n      <p>\n        Data from{\" \"}\n        <a href=\"https://github.com/owid/covid-19-data\">Our World in Data</a>\n        {\" and \"}\n        <a href=\"https://api.covid19tracker.ca\">COVID-19 Tracker Canada</a>.\n      </p>\n      <p>\n        Code in <a href=\"https://github.com/sastels/first-dose\">Github</a>.\n      </p>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","const chartData = (data, dataField, area, population) => {\n  const country_data = data[area] || {};\n  var munged = [];\n  for (const key in country_data) {\n    if (country_data[key] !== null) {\n      const x = country_data[key];\n      if (x.date >= 1608422400000) {\n        // 2020-12-20\n        munged.push([x.date, (x[dataField] * 100) / population]);\n      }\n    }\n  }\n  return munged;\n};\n\nexports.chartData = chartData;\n"],"sourceRoot":""}
{"version":3,"sources":["DoseChart.js","App.js","reportWebVitals.js","index.js"],"names":["mungeData","data","country","country_data","munged","key","push","parseInt","Chart","options","plotOptions","line","marker","enabled","tooltip","shared","formatter","yourDate","Date","this","x","offset","getTimezoneOffset","retval","getTime","toISOString","split","points","map","series","name","y","toFixed","join","chart","zoomType","title","text","xAxis","type","yAxis","highcharts","Highcharts","DoseChart","useState","setData","useEffect","fetch","headers","then","response","json","className","App","style","textAlign","margin","href","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gQAKMA,EAAY,SAACC,EAAMC,GACrB,IAAMC,EAAeF,EAAKC,IAAY,GAClCE,EAAS,GACb,IAAK,IAAMC,KAAOF,EACY,OAAtBA,EAAaE,IACbD,EAAOE,KAAK,CAACC,SAASF,GAAMF,EAAaE,KAGjD,OAAOD,GAGX,SAASI,EAAMP,GACX,IAAMQ,EAAU,CACZC,YAAa,CACTC,KAAM,CACFC,OAAQ,CACJC,SAAS,KAIrBC,QAAS,CACLC,QAAQ,EACRC,UAAW,WACP,IAAIC,EAAW,IAAIC,KAAKC,KAAKC,GACvBC,EAASJ,EAASK,oBAGpBC,GAFJN,EAAW,IAAIC,KAAKD,EAASO,UAAoB,GAAPH,EAAU,MAC9BI,cAAcC,MAAM,KAAK,GAC3B,OAEpB,OADAH,GAAUJ,KAAKQ,OAAOC,KAAI,SAAAR,GAAC,gBAAMA,EAAES,OAAOC,KAAf,aAAwBV,EAAEW,EAAEC,QAAQ,GAApC,QAA2CC,KAAK,UAInFC,MAAO,CACHC,SAAU,KAEdC,MAAO,CACLC,KAAM,uBAERC,MAAO,CACHC,KAAM,YAEVC,MAAO,CACHJ,MAAO,CACHC,KAAM,uBAGdR,OAAQ,CACJ,CACIC,KAAM,SACN7B,KAAOD,EAAUC,EAAM,WAE3B,CACI6B,KAAM,iBACN7B,KAAOD,EAAUC,EAAM,mBAE3B,CACI6B,KAAM,gBACN7B,KAAOD,EAAUC,EAAM,kBAE3B,CACI6B,KAAM,SACN7B,KAAMD,EAAUC,EAAM,aAI9B,OACI,cAAC,IAAD,CACEwC,WAAYC,IACZjC,QAASA,IAoCRkC,MA/Bf,WAAsB,IAAD,EACIC,mBAAS,IADb,mBACV3C,EADU,KACL4C,EADK,KAsBf,OAJAC,qBAAU,WAfRC,MAAM,kBACL,CACCC,QAAU,CACR,eAAgB,mBAChB,OAAU,sBAIXC,MAAK,SAASC,GACb,OAAOA,EAASC,UAEjBF,MAAK,SAAShD,GACb4C,EAAQ5C,QAKZ,IAGA,qBAAKmD,UAAU,MAAf,SAEG5C,EAAMP,MCvFFoD,MAZf,WACE,OACE,sBAAKC,MAAO,CAACC,UAAU,UAAvB,UACE,qBAAKD,MAAS,CAACE,OAAS,IAAMJ,UAAU,MAAxC,SACE,cAAC,EAAD,MAEF,wHACA,2CAAa,mBAAGK,KAAK,wCAAR,+BAAb,WCCSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBX,MAAK,YAAkD,IAA/CY,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.23fb86c5.chunk.js","sourcesContent":["\nimport Highcharts from 'highcharts'\nimport HighchartsReact from 'highcharts-react-official'\nimport React,{useState,useEffect} from 'react';\n\nconst mungeData = (data, country) => {\n    const country_data = data[country] || {}\n    var munged = []\n    for (const key in country_data) {\n        if (country_data[key] !== null) {\n            munged.push([parseInt(key), country_data[key]])\n        }\n    }\n    return munged\n}\n\nfunction Chart(data) {\n    const options = {\n        plotOptions: {\n            line: {\n                marker: {\n                    enabled: false\n                }\n            }\n        },\n        tooltip: {\n            shared: true,\n            formatter: function () {\n                var yourDate = new Date(this.x);\n                const offset = yourDate.getTimezoneOffset(); \n                yourDate = new Date(yourDate.getTime() + (offset*60*1000)); \n                const date = yourDate.toISOString().split('T')[0]\n                var retval = date + '<br>'\n                retval += this.points.map(x=> `${x.series.name}: ${x.y.toFixed(1)}%`).join('<br>')\n                return retval\n            }\n        },\n        chart: {\n            zoomType: 'x'\n        },\n        title: {\n          text: 'First Dose Coverage'\n        },\n        xAxis: {\n            type: 'datetime'\n        },\n        yAxis: {\n            title: {\n                text: 'Percentage covered'\n            }\n        },\n        series: [\n            {\n                name: \"Israel\",    \n                data:  mungeData(data, \"Israel\")\n            },\n            {\n                name: \"United Kingdom\",    \n                data:  mungeData(data, \"United Kingdom\")\n            },\n            {\n                name: \"United States\",    \n                data:  mungeData(data, \"United States\")\n            },\n            {       \n                name: \"Canada\",    \n                data: mungeData(data, \"Canada\")\n            },\n        ]\n      }\n        return (\n            <HighchartsReact\n              highcharts={Highcharts}\n              options={options}\n            />\n          )    \n}\n\nfunction DoseChart() {\n    const [data,setData]=useState([]);\n    const getData=()=>{\n        fetch('dose_stats.json'\n        ,{\n          headers : { \n            'Content-Type': 'application/json',\n            'Accept': 'application/json'\n           }\n        }\n        )\n          .then(function(response){\n            return response.json();\n          })\n          .then(function(data) {\n            setData(data);\n          });\n      }\n      useEffect(()=>{\n        getData()\n      },[])\n\n      return (\n        <div className=\"App\">\n         {\n           Chart(data)\n         }\n        </div>\n      );\n    }\n\nexport default DoseChart","import './App.css';\nimport DoseChart from './DoseChart';\n\n\nfunction App() {\n  return (\n    <div style={{textAlign:\"center\"}}>\n      <div style = {{margin : 50 }} className=\"App\">\n        <DoseChart/>\n      </div>\n      <p>Percentage of people in a country who have had at least one dose of a Covid-19 vaccine.</p>\n      <p>Data from <a href=\"https://github.com/owid/covid-19-data\">Our World in Data</a>.</p>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
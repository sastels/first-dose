{"version":3,"sources":["DoseChart.js","App.js","reportWebVitals.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","storageRef","storage","ref","mungeData","data","country","country_data","munged","key","push","parseInt","Chart","options","plotOptions","line","marker","enabled","tooltip","shared","formatter","yourDate","Date","this","x","offset","getTimezoneOffset","retval","getTime","toISOString","split","points","map","series","name","y","toFixed","join","chart","zoomType","title","text","xAxis","type","yAxis","highcharts","Highcharts","DoseChart","useState","setData","getData","a","console","log","child","getDownloadURL","url","fetch","headers","response","useEffect","className","App","style","textAlign","margin","href","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0SAmBAA,IAASC,cAVc,CACrBC,OAAQ,0CACRC,WAAY,mCACZC,UAAW,mBACXC,cAAe,+BACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAOjB,IACMC,EADUT,IAASU,UACEC,MAoBrBC,EAAY,SAACC,EAAMC,GACrB,IAAMC,EAAeF,EAAKC,IAAY,GAClCE,EAAS,GACb,IAAK,IAAMC,KAAOF,EACY,OAAtBA,EAAaE,IACbD,EAAOE,KAAK,CAACC,SAASF,GAAMF,EAAaE,KAGjD,OAAOD,GAGX,SAASI,EAAMP,GACX,IAAMQ,EAAU,CACZC,YAAa,CACTC,KAAM,CACFC,OAAQ,CACJC,SAAS,KAIrBC,QAAS,CACLC,QAAQ,EACRC,UAAW,WACP,IAAIC,EAAW,IAAIC,KAAKC,KAAKC,GACvBC,EAASJ,EAASK,oBAGpBC,GAFJN,EAAW,IAAIC,KAAKD,EAASO,UAAoB,GAAPH,EAAU,MAC9BI,cAAcC,MAAM,KAAK,GAC3B,OAEpB,OADAH,GAAUJ,KAAKQ,OAAOC,KAAI,SAAAR,GAAC,gBAAMA,EAAES,OAAOC,KAAf,aAAwBV,EAAEW,EAAEC,QAAQ,GAApC,QAA2CC,KAAK,UAInFC,MAAO,CACHC,SAAU,KAEdC,MAAO,CACLC,KAAM,uBAERC,MAAO,CACHC,KAAM,YAEVC,MAAO,CACHJ,MAAO,CACHC,KAAM,uBAGdR,OAAQ,CACJ,CACIC,KAAM,SACN7B,KAAOD,EAAUC,EAAM,WAE3B,CACI6B,KAAM,iBACN7B,KAAOD,EAAUC,EAAM,mBAE3B,CACI6B,KAAM,gBACN7B,KAAOD,EAAUC,EAAM,kBAE3B,CACI6B,KAAM,SACN7B,KAAMD,EAAUC,EAAM,aAI9B,OACI,cAAC,IAAD,CACEwC,WAAYC,IACZjC,QAASA,IA8DRkC,MAzDf,WAAsB,IAAD,EACIC,mBAAS,IADb,mBACV3C,EADU,KACL4C,EADK,KAIXC,EAAO,uCAAG,gCAAAC,EAAA,6DACdC,QAAQC,IAAI,KADE,SAEIpD,EAAWqD,MAAM,mBAAmBC,iBAFxC,cAERC,EAFQ,OAGdJ,QAAQC,IAAIG,GAHE,SAISC,MAAMD,EAAI,CAC7B,KAAQ,OACRE,QAAU,CACR,eAAgB,mBAChB,OAAU,sBARF,cAIRC,EAJQ,OAUTP,QAAQC,IAAIM,GAVH,UAWKA,EAASlB,OAXd,QAWRpC,EAXQ,OAYd+C,QAAQC,IAAI,KAEZD,QAAQC,IAAI,CAAChD,SACb4C,EAAQ5C,GAfM,4CAAH,qDA4CX,OAJAuD,qBAAU,WACRV,MACA,IAGA,qBAAKW,UAAU,MAAf,SAEGjD,EAAMP,MCvJFyD,MAbf,WACE,OACE,sBAAKC,MAAO,CAACC,UAAU,UAAvB,UACE,qBAAKD,MAAS,CAACE,OAAS,IAAMJ,UAAU,MAAxC,SACE,cAAC,EAAD,MAEF,wHACA,2CAAa,mBAAGK,KAAK,wCAAR,+BAAb,OACA,yCAAW,mBAAGA,KAAK,wCAAR,oBAAX,WCASC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.c57980d0.chunk.js","sourcesContent":["\nimport Highcharts from 'highcharts'\nimport HighchartsReact from 'highcharts-react-official'\nimport React,{useState,useEffect} from 'react';\nimport firebase from \"firebase/app\";\nimport 'firebase/storage';\n\n// Set the configuration for your app\n// TODO: Replace with your app's config object\nconst firebaseConfig = {\n  apiKey: \"AIzaSyCYOlqH5i8Q_nN_5i91JvUY3qU4Blan9Uo\",\n  authDomain: \"first-dose-eb9bd.firebaseapp.com\",\n  projectId: \"first-dose-eb9bd\",\n  storageBucket: \"first-dose-eb9bd.appspot.com\",\n  messagingSenderId: \"212541290476\",\n  appId: \"1:212541290476:web:03a13b63cb5280de87b2c9\",\n  measurementId: \"G-2CY2T47KWQ\"\n};\n\nfirebase.initializeApp(firebaseConfig);\n\n// TODO need to put the data in state\n\nconst storage = firebase.storage();\nconst storageRef = storage.ref();\n\n//  storageRef.child('dose_stats.json').getDownloadURL()\n\n// .then((url) => {\n//  var xhr = new XMLHttpRequest();\n//  xhr.responseType = 'blob';\n//  xhr.onload = (event) => {\n//    var blob = xhr.response;\n//    var data = blob.text()\n//    console.log({data})\n//  };\n//  xhr.open('GET', url);\n//  xhr.send();\n// })\n// .catch((error) => {\n//   console.log(error)\n// });\n\n\nconst mungeData = (data, country) => {\n    const country_data = data[country] || {}\n    var munged = []\n    for (const key in country_data) {\n        if (country_data[key] !== null) {\n            munged.push([parseInt(key), country_data[key]])\n        }\n    }\n    return munged\n}\n\nfunction Chart(data) {\n    const options = {\n        plotOptions: {\n            line: {\n                marker: {\n                    enabled: false\n                }\n            }\n        },\n        tooltip: {\n            shared: true,\n            formatter: function () {\n                var yourDate = new Date(this.x);\n                const offset = yourDate.getTimezoneOffset(); \n                yourDate = new Date(yourDate.getTime() + (offset*60*1000)); \n                const date = yourDate.toISOString().split('T')[0]\n                var retval = date + '<br>'\n                retval += this.points.map(x=> `${x.series.name}: ${x.y.toFixed(1)}%`).join('<br>')\n                return retval\n            }\n        },\n        chart: {\n            zoomType: 'x'\n        },\n        title: {\n          text: 'First Dose Coverage'\n        },\n        xAxis: {\n            type: 'datetime'\n        },\n        yAxis: {\n            title: {\n                text: 'Percentage covered'\n            }\n        },\n        series: [\n            {\n                name: \"Israel\",    \n                data:  mungeData(data, \"Israel\")\n            },\n            {\n                name: \"United Kingdom\",    \n                data:  mungeData(data, \"United Kingdom\")\n            },\n            {\n                name: \"United States\",    \n                data:  mungeData(data, \"United States\")\n            },\n            {       \n                name: \"Canada\",    \n                data: mungeData(data, \"Canada\")\n            },\n        ]\n      }\n        return (\n            <HighchartsReact\n              highcharts={Highcharts}\n              options={options}\n            />\n          )    \n}\n\nfunction DoseChart() {\n    const [data,setData]=useState([]);\n\n\n    const getData = async () => {\n      console.log(\"1\")\n      const url = await storageRef.child('dose_stats.json').getDownloadURL()\n      console.log(url)\n      const response = await fetch(url,{\n          'mode': 'cors',\n          headers : { \n            'Content-Type': 'application/json',\n            'Accept': 'application/json',\n           }})\n           console.log(response)\n      const data = await response.text()\n      console.log(\"2\")\n\n      console.log({data})\n      setData(data)\n    } \n\n    // const getData=()=>{\n    //     fetch('dose_stats.json'\n    //     ,{\n    //       headers : { \n    //         'Content-Type': 'application/json',\n    //         'Accept': 'application/json'\n    //        }\n    //     }\n    //     )\n    //       .then(function(response){\n    //         return response.json();\n    //       })\n    //       .then(function(data) {\n    //         setData(data);\n    //       })\n    //       .catch((error) => {\n    //         // Handle any errors\n    //       });\n    //   }\n\n\n\n      useEffect(()=>{\n        getData()\n      },[])\n\n      return (\n        <div className=\"App\">\n         {\n           Chart(data)\n         }\n        </div>\n      );\n    }\n\nexport default DoseChart","import './App.css';\nimport DoseChart from './DoseChart';\n\n\nfunction App() {\n  return (\n    <div style={{textAlign:\"center\"}}>\n      <div style = {{margin : 50 }} className=\"App\">\n        <DoseChart/>\n      </div>\n      <p>Percentage of people in a country who have had at least one dose of a Covid-19 vaccine.</p>\n      <p>Data from <a href=\"https://github.com/owid/covid-19-data\">Our World in Data</a>.</p>\n      <p>Code in <a href=\"https://github.com/sastels/first-dose\">Github</a>.</p>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
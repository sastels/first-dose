{"version":3,"sources":["mungingUtils.js","MasterChart.js","Tables.js","AllCharts.js","App.js","reportWebVitals.js","index.js"],"names":["exports","chartData","data","dataField","area","population","startDate","scale","country_data","munged","key","x","date","push","MasterChart","title","series","precision","type","options","plotOptions","line","marker","enabled","tooltip","shared","formatter","yourDate","Date","this","offset","getTimezoneOffset","retval","getTime","toISOString","split","points","map","name","y","toFixed","join","chart","zoomType","resetZoomButton","position","align","text","xAxis","yAxis","linkedTo","opposite","style","boxShadow","highcharts","Highcharts","DoseTable","props","keys","TableContainer","Table","size","TableHead","TableRow","TableCell","TableBody","slice","peopleVaccinated","peopleFullyVaccinated","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","Israel","Canada","Ontario","Ottawa","lastUpdated","lastDate","Math","max","substring","AllCharts","useState","ourWorldData","setOurWorldData","canadaData","setCanadaData","ontarioData","setOntarioData","ottawaData","setOttawaData","updated","setUpdated","getOurWorldData","a","storage","storageRef","ref","child","getDownloadURL","url","xhr","XMLHttpRequest","responseType","onload","response","open","send","getCanadaData","getOntarioData","getOttawaData","useEffect","countries","local","some","k","sort","b","aV","bV","marginBottom","Typography","variant","component","className","c","gutterBottom","startsWith","App","textAlign","margin","varient","href","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gGAqBAA,EAAQC,UArBU,SAChBC,EACAC,EACAC,EACAC,GAGI,IAFJC,EAEG,uDAFS,WACZC,EACG,uDADK,IAEFC,EAAeN,EAAKE,IAAS,GAC/BK,EAAS,GACb,IAAK,IAAMC,KAAOF,EAChB,GAA0B,OAAtBA,EAAaE,GAAe,CAC9B,IAAMC,EAAIH,EAAaE,GACnBC,EAAEC,MAAQN,GACZG,EAAOI,KAAK,CAACF,EAAEC,KAAOD,EAAER,GAAaI,EAASF,IAIpD,OAAOI,I,uOCmDMK,MAjEf,SAAqBC,EAAOC,GAA0C,IAAlCC,EAAiC,uDAArB,EAAGC,EAAkB,uDAAX,UAClDC,EAAU,CACdC,YAAa,CACXC,KAAM,CACJC,OAAQ,CACNC,SAAS,KAIfC,QAAS,CACPC,QAAQ,EACRC,UAAW,WACT,IAAIC,EAAW,IAAIC,KAAKC,KAAKlB,GACvBmB,EAASH,EAASI,oBAGpBC,GAFJL,EAAW,IAAIC,KAAKD,EAASM,UAAqB,GAATH,EAAc,MACjCI,cAAcC,MAAM,KAAK,GAC3B,OAQpB,OAPAH,GAAUH,KAAKO,OACZC,KACC,SAAC1B,GAAD,MACE,UAAGA,EAAEK,OAAOsB,KAAZ,aAAqB3B,EAAE4B,EAAEC,QAAQvB,KACvB,YAATC,EAAqB,IAAM,OAE/BuB,KAAK,UAIZC,MAAO,CACLC,SAAU,IACVC,gBAAiB,CACfC,SAAU,CACRC,MAAO,OACPP,GAAI,MAIVxB,MAAO,CACLgC,KAAMhC,GAERiC,MAAO,CACL9B,KAAM,YAER+B,MAAO,CACL,CACElC,MAAO,CACLgC,KAAe,YAAT7B,EAAqB,qBAAuB,KAGtD,CACEH,MAAO,CACLgC,KAAM,KAERG,SAAU,EACVC,UAAU,IAGdnC,OAAQA,GAEV,OACE,qBAAKoC,MAAO,CAAEC,UAAW,gBAAzB,SACE,cAAC,IAAD,CAAiBC,WAAYC,IAAYpC,QAASA,O,wDCfzCqC,EA1CG,SAACC,GAAW,IACtBvD,EAA2BuD,EAA3BvD,KAAMwD,EAAqBD,EAArBC,KAAMrD,EAAeoD,EAAfpD,WAElB,OACE,cAACsD,EAAA,EAAD,UACE,eAACC,EAAA,EAAD,CAAOC,KAAK,QAAZ,UACE,cAACC,EAAA,EAAD,UACE,eAACC,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,IACA,cAACA,EAAA,EAAD,yBACA,cAACA,EAAA,EAAD,oCAGJ,cAACC,EAAA,EAAD,UACGP,EAAKrB,KACJ,SAAC3B,GAAD,OACER,EAAKQ,IACH,eAACqD,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,UAAYtD,IACZ,eAACsD,EAAA,EAAD,YAE+C,IAA1C9D,EAAKQ,GAAKwD,OAAO,GAAG,GAAGC,iBACxB9D,EAAWK,IACX8B,QAAQ,GAAI,IAJhB,OAOA,eAACwB,EAAA,EAAD,YAEoD,IAA/C9D,EAAKQ,GAAKwD,OAAO,GAAG,GAAGE,sBACxB/D,EAAWK,IACX8B,QAAQ,GAAI,IAJhB,SATa9B,c,QCN/B2D,IAASC,cATc,CACrBC,OAAQ,0CACRC,WAAY,mCACZC,UAAW,mBACXC,cAAe,+BACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAIjB,IAAMxE,EAAa,CACjByE,OAAQ,QACR,iBAAkB,SAClB,gBAAiB,UACjBC,OAAQ,SACRC,QAAS,SACTC,OAAQ,SAIJC,EAAc,SAAChF,GACnB,IAAIiF,EAAW,KAET3E,EAAeN,EAAI,QAAa,GACtC,IAAK,IAAMQ,KAAOF,EAChB,GAA0B,OAAtBA,EAAaE,GAAe,CAC9B,IAAMC,EAAIH,EAAaE,GACvByE,EAAWA,EAAWC,KAAKC,IAAIF,EAAUxE,EAAEC,MAAQD,EAAEC,KAIzD,OADAuE,EAAW,IAAIvD,KAAKuD,IACJjD,cAAcoD,UAAU,EAAG,KA4N9BC,MAzNf,WAAsB,IAAD,EACqBC,mBAAS,IAD9B,mBACZC,EADY,KACEC,EADF,OAEiBF,mBAAS,IAF1B,mBAEZG,EAFY,KAEAC,EAFA,OAGmBJ,mBAAS,IAH5B,mBAGZK,EAHY,KAGCC,EAHD,OAIiBN,mBAAS,IAJ1B,mBAIZO,EAJY,KAIAC,EAJA,OAMWR,mBAAS,IANpB,mBAMZS,EANY,KAMHC,EANG,KAQbC,EAAe,uCAAG,kCAAAC,EAAA,6DAChBC,EAAUhC,IAASgC,UACnBC,EAAaD,EAAQE,MAFL,SAGJD,EAAWE,MAAM,uBAAuBC,iBAHpC,OAGhBC,EAHgB,QAIlBC,EAAM,IAAIC,gBACVC,aAAe,OACnBF,EAAIG,OAAJ,sBAAa,4BAAAV,EAAA,sEACMO,EAAII,SADV,OACP7G,EADO,OAEXwF,EAAgBxF,GAChBgG,EAAWhB,EAAYhF,IAHZ,2CAKbyG,EAAIK,KAAK,MAAON,GAChBC,EAAIM,OAZkB,4CAAH,qDAefC,EAAa,uCAAG,kCAAAd,EAAA,6DACdC,EAAUhC,IAASgC,UACnBC,EAAaD,EAAQE,MAFP,SAGFD,EACfE,MAAM,+BACNC,iBALiB,OAGdC,EAHc,QAMhBC,EAAM,IAAIC,gBACVC,aAAe,OACnBF,EAAIG,OAAJ,sBAAa,4BAAAV,EAAA,sEACMO,EAAII,SADV,OACP7G,EADO,OAEX0F,EAAc1F,GAFH,2CAIbyG,EAAIK,KAAK,MAAON,GAChBC,EAAIM,OAbgB,4CAAH,qDAgBbE,EAAc,uCAAG,kCAAAf,EAAA,6DACfC,EAAUhC,IAASgC,UACnBC,EAAaD,EAAQE,MAFN,SAGHD,EACfE,MAAM,2BACNC,iBALkB,OAGfC,EAHe,QAMjBC,EAAM,IAAIC,gBACVC,aAAe,OACnBF,EAAIG,OAAJ,sBAAa,4BAAAV,EAAA,sEACMO,EAAII,SADV,OACP7G,EADO,OAEX4F,EAAe5F,GAFJ,2CAIbyG,EAAIK,KAAK,MAAON,GAChBC,EAAIM,OAbiB,4CAAH,qDAgBdG,EAAa,uCAAG,kCAAAhB,EAAA,6DACdC,EAAUhC,IAASgC,UACnBC,EAAaD,EAAQE,MAFP,SAGFD,EACfE,MAAM,+BACNC,iBALiB,OAGdC,EAHc,QAMhBC,EAAM,IAAIC,gBACVC,aAAe,OACnBF,EAAIG,OAAJ,sBAAa,4BAAAV,EAAA,sEACMO,EAAII,SADV,OACP7G,EADO,OAEX8F,EAAc9F,GAFH,2CAIbyG,EAAIK,KAAK,MAAON,GAChBC,EAAIM,OAbgB,4CAAH,qDA8BnBI,qBAAU,WACRlB,IACAe,IACAC,IACAC,MAEC,IAEH,IAAMlH,EAAI,mDACLuF,GACAE,GACAE,GACAE,GAICuB,EAAY,CAAC,SAAU,iBAAkB,gBAAiB,UAC1DC,EAAQ,CAAC,SAAU,UAAW,UAEpC,MAAI,UAAID,EAAcC,GAAOC,MAAK,SAACC,GAAD,QAASA,KAAKvH,MACvC,IAUToH,EAAUI,MAPc,SAACtB,EAAGuB,GAC1B,IAAIC,EAAK1H,EAAKkG,GAAGlC,OAAO,GAAG,GAAGC,iBAAmB9D,EAAW+F,GACxDyB,EAAK3H,EAAKyH,GAAGzD,OAAO,GAAG,GAAGC,iBAAmB9D,EAAWsH,GAC5D,OAAIC,EAAKC,EAAW,EACXA,EAAKD,GAAY,EACd,KAKZ,gCACE,sBAAKxE,MAAO,CAAE0E,aAAc,IAA5B,UACE,eAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKC,UAAU,KAAnC,qBACWhC,EADX,OAGA,sBAAKiC,UAAU,QAAf,UACE,qBAAKA,UAAU,OAAf,SACE,cAAC,EAAD,CAAWhI,KAAMA,EAAMwD,KAAM4D,EAAWjH,WAAYA,MAEtD,qBAAK6H,UAAU,OAAf,SACE,cAAC,EAAD,CAAWhI,KAAMA,EAAMwD,KAAM6D,EAAOlH,WAAYA,YAKtD,sBAAK+C,MAAO,CAAE0E,aAAc,IAA5B,UACE,cAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKC,UAAU,KAAnC,uBAIA,sBAAKC,UAAU,QAAf,UACE,qBAAKA,UAAU,OAAf,SACGpH,EACC,aACAwG,EAAUjF,KAAI,SAAC8F,GAAD,MAAQ,CACpB7F,KAAM6F,EACNjI,KAAMD,oBAAUC,EAAM,mBAAoBiI,EAAG9H,EAAW8H,WAI9D,qBAAKD,UAAU,OAAf,SACGpH,EACC,mBACAwG,EAAUjF,KAAI,SAAC8F,GAAD,MAAQ,CACpB7F,KAAM6F,EACNjI,KAAMD,oBACJC,EACA,wBACAiI,EACA9H,EAAW8H,iBAQvB,sBAAK/E,MAAO,CAAE0E,aAAc,IAA5B,UACE,cAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKC,UAAU,KAAKG,cAAY,EAApD,uCAIA,sBAAKF,UAAU,QAAf,UACE,qBAAKA,UAAU,OAAf,SACGpH,EACC,aACAyG,EAAMlF,KAAI,SAAC8F,GAAD,MAAQ,CAChB7F,KAAM6F,EACNjI,KAAMD,oBAAUC,EAAM,mBAAoBiI,EAAG9H,EAAW8H,WAI9D,qBAAKD,UAAU,OAAf,SACGpH,EACC,mBACAyG,EAAMlF,KAAI,SAAC8F,GAAD,MAAQ,CAChB7F,KAAM6F,EACNjI,KAAMD,oBACJC,EACA,wBACAiI,EACA9H,EAAW8H,iBAQtBrH,EACC,kCACA,CAAC,SAAU,UAAW,UAAUuB,KAAI,SAAC8F,GAAD,MAAQ,CAC1C7F,KAAM6F,EAAEE,WAAW,UAAY,SAAWF,EAC1CjI,KAAMD,oBACJC,EACA,sBACAiI,EACA9H,EAAW8H,GACX,EACA,SAGJ,EACA,eClOOG,MAzBf,WACE,OACE,sBAAKlF,MAAO,CAAEmF,UAAW,UAAzB,UACE,cAACR,EAAA,EAAD,CAAYC,QAAQ,KAAKC,UAAU,KAAnC,qCAIA,qBAAK7E,MAAO,CAAEoF,OAAQ,IAAMN,UAAU,MAAtC,SACE,cAAC,EAAD,MAGF,eAACH,EAAA,EAAD,CAAYU,QAAQ,QAApB,sBACY,IACV,mBAAGC,KAAK,wCAAR,+BACC,QACD,mBAAGA,KAAK,gCAAR,wCAEF,uBACA,eAACX,EAAA,EAAD,CAAYU,QAAQ,QAApB,qBACU,mBAAGC,KAAK,wCAAR,2BCXDC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.ad9ba1ea.chunk.js","sourcesContent":["const chartData = (\n  data,\n  dataField,\n  area,\n  population,\n  startDate = 1608422400000, // 2020-12-20\n  scale = 100\n) => {\n  const country_data = data[area] || {};\n  var munged = [];\n  for (const key in country_data) {\n    if (country_data[key] !== null) {\n      const x = country_data[key];\n      if (x.date >= startDate) {\n        munged.push([x.date, (x[dataField] * scale) / population]);\n      }\n    }\n  }\n  return munged;\n};\n\nexports.chartData = chartData;\n","import Highcharts from \"highcharts\";\nimport HighchartsReact from \"highcharts-react-official\";\nimport React from \"react\";\n\nfunction MasterChart(title, series, precision = 1, type = \"percent\") {\n  const options = {\n    plotOptions: {\n      line: {\n        marker: {\n          enabled: false,\n        },\n      },\n    },\n    tooltip: {\n      shared: true,\n      formatter: function () {\n        var yourDate = new Date(this.x);\n        const offset = yourDate.getTimezoneOffset();\n        yourDate = new Date(yourDate.getTime() + offset * 60 * 1000);\n        const date = yourDate.toISOString().split(\"T\")[0];\n        var retval = date + \"<br>\";\n        retval += this.points\n          .map(\n            (x) =>\n              `${x.series.name}: ${x.y.toFixed(precision)}` +\n              (type === \"percent\" ? \"%\" : \"\")\n          )\n          .join(\"<br>\");\n        return retval;\n      },\n    },\n    chart: {\n      zoomType: \"x\",\n      resetZoomButton: {\n        position: {\n          align: \"left\",\n          y: -40,\n        },\n      },\n    },\n    title: {\n      text: title,\n    },\n    xAxis: {\n      type: \"datetime\",\n    },\n    yAxis: [\n      {\n        title: {\n          text: type === \"percent\" ? \"Percentage covered\" : \"\",\n        },\n      },\n      {\n        title: {\n          text: \" \",\n        },\n        linkedTo: 0,\n        opposite: true,\n      },\n    ],\n    series: series,\n  };\n  return (\n    <div style={{ boxShadow: \"0 0 3px #ddd\" }}>\n      <HighchartsReact highcharts={Highcharts} options={options} />\n    </div>\n  );\n}\n\nexport default MasterChart;\n","import Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\n\nconst DoseTable = (props) => {\n  var { data, keys, population } = props;\n\n  return (\n    <TableContainer>\n      <Table size=\"small\">\n        <TableHead>\n          <TableRow>\n            <TableCell></TableCell>\n            <TableCell>First Dose</TableCell>\n            <TableCell>Fully Vaccinated</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {keys.map(\n            (key) =>\n              data[key] && (\n                <TableRow key={key}>\n                  <TableCell>{key}</TableCell>\n                  <TableCell>\n                    {(\n                      (data[key].slice(-1)[0].peopleVaccinated * 100) /\n                      population[key]\n                    ).toFixed(1)}{\" \"}\n                    %\n                  </TableCell>\n                  <TableCell>\n                    {(\n                      (data[key].slice(-1)[0].peopleFullyVaccinated * 100) /\n                      population[key]\n                    ).toFixed(1)}{\" \"}\n                    %\n                  </TableCell>\n                </TableRow>\n              )\n          )}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  );\n};\n\nexport default DoseTable;\n","import \"./AllCharts.css\";\nimport React, { useState, useEffect } from \"react\";\nimport firebase from \"firebase/app\";\nimport \"firebase/storage\";\nimport MasterChart from \"./MasterChart\";\nimport { chartData } from \"./mungingUtils\";\nimport DoseTable from \"./Tables\";\nimport Typography from \"@material-ui/core/Typography\";\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyCYOlqH5i8Q_nN_5i91JvUY3qU4Blan9Uo\",\n  authDomain: \"first-dose-eb9bd.firebaseapp.com\",\n  projectId: \"first-dose-eb9bd\",\n  storageBucket: \"first-dose-eb9bd.appspot.com\",\n  messagingSenderId: \"212541290476\",\n  appId: \"1:212541290476:web:03a13b63cb5280de87b2c9\",\n  measurementId: \"G-2CY2T47KWQ\",\n};\nfirebase.initializeApp(firebaseConfig);\n\nconst population = {\n  Israel: 8652167,\n  \"United Kingdom\": 67893379,\n  \"United States\": 334438269,\n  Canada: 37746527,\n  Ontario: 14745040,\n  Ottawa: 1060658,\n  // OttawaOPH: 1060658,\n};\n\nconst lastUpdated = (data) => {\n  var lastDate = null;\n  const country = \"Canada\";\n  const country_data = data[country] || {};\n  for (const key in country_data) {\n    if (country_data[key] !== null) {\n      const x = country_data[key];\n      lastDate = lastDate ? Math.max(lastDate, x.date) : x.date;\n    }\n  }\n  lastDate = new Date(lastDate);\n  return lastDate.toISOString().substring(0, 10);\n};\n\nfunction AllCharts() {\n  const [ourWorldData, setOurWorldData] = useState([]);\n  const [canadaData, setCanadaData] = useState([]);\n  const [ontarioData, setOntarioData] = useState([]);\n  const [ottawaData, setOttawaData] = useState([]);\n  // const [ophData, setOphData] = useState([]);\n  const [updated, setUpdated] = useState([]);\n\n  const getOurWorldData = async () => {\n    const storage = firebase.storage();\n    const storageRef = storage.ref();\n    const url = await storageRef.child(\"ourWorldInData.json\").getDownloadURL();\n    var xhr = new XMLHttpRequest();\n    xhr.responseType = \"json\";\n    xhr.onload = async () => {\n      var data = await xhr.response;\n      setOurWorldData(data);\n      setUpdated(lastUpdated(data));\n    };\n    xhr.open(\"GET\", url);\n    xhr.send();\n  };\n\n  const getCanadaData = async () => {\n    const storage = firebase.storage();\n    const storageRef = storage.ref();\n    const url = await storageRef\n      .child(\"covid19_tracker_canada.json\")\n      .getDownloadURL();\n    var xhr = new XMLHttpRequest();\n    xhr.responseType = \"json\";\n    xhr.onload = async () => {\n      var data = await xhr.response;\n      setCanadaData(data);\n    };\n    xhr.open(\"GET\", url);\n    xhr.send();\n  };\n\n  const getOntarioData = async () => {\n    const storage = firebase.storage();\n    const storageRef = storage.ref();\n    const url = await storageRef\n      .child(\"covid19_tracker_on.json\")\n      .getDownloadURL();\n    var xhr = new XMLHttpRequest();\n    xhr.responseType = \"json\";\n    xhr.onload = async () => {\n      var data = await xhr.response;\n      setOntarioData(data);\n    };\n    xhr.open(\"GET\", url);\n    xhr.send();\n  };\n\n  const getOttawaData = async () => {\n    const storage = firebase.storage();\n    const storageRef = storage.ref();\n    const url = await storageRef\n      .child(\"covid19_tracker_ottawa.json\")\n      .getDownloadURL();\n    var xhr = new XMLHttpRequest();\n    xhr.responseType = \"json\";\n    xhr.onload = async () => {\n      var data = await xhr.response;\n      setOttawaData(data);\n    };\n    xhr.open(\"GET\", url);\n    xhr.send();\n  };\n\n  // const getOPHData = async () => {\n  //   const storage = firebase.storage();\n  //   const storageRef = storage.ref();\n  //   const url = await storageRef.child(\"openOttawa.json\").getDownloadURL();\n  //   var xhr = new XMLHttpRequest();\n  //   xhr.responseType = \"json\";\n  //   xhr.onload = async () => {\n  //     var data = await xhr.response;\n  //     setOphData({ OttawaOPH: data.Ottawa });\n  //   };\n  //   xhr.open(\"GET\", url);\n  //   xhr.send();\n  // };\n\n  useEffect(() => {\n    getOurWorldData();\n    getCanadaData();\n    getOntarioData();\n    getOttawaData();\n    // getOPHData();\n  }, []);\n\n  const data = {\n    ...ourWorldData,\n    ...canadaData,\n    ...ontarioData,\n    ...ottawaData,\n    // ...ophData,\n  };\n\n  const countries = [\"Israel\", \"United Kingdom\", \"United States\", \"Canada\"];\n  const local = [\"Canada\", \"Ontario\", \"Ottawa\"];\n\n  if ([...countries, ...local].some((k) => !(k in data))) {\n    return \"\";\n  }\n\n  const compareFunction = (a, b) => {\n    let aV = data[a].slice(-1)[0].peopleVaccinated / population[a];\n    let bV = data[b].slice(-1)[0].peopleVaccinated / population[b];\n    if (aV < bV) return 1;\n    else if (bV < aV) return -1;\n    else return 0;\n  };\n  countries.sort(compareFunction);\n\n  return (\n    <div>\n      <div style={{ marginBottom: 50 }}>\n        <Typography variant=\"h5\" component=\"h2\">\n          Latest ({updated})\n        </Typography>\n        <div className=\"cards\">\n          <div className=\"card\">\n            <DoseTable data={data} keys={countries} population={population} />\n          </div>\n          <div className=\"card\">\n            <DoseTable data={data} keys={local} population={population} />\n          </div>\n        </div>\n      </div>\n\n      <div style={{ marginBottom: 50 }}>\n        <Typography variant=\"h5\" component=\"h2\">\n          Countries\n        </Typography>\n\n        <div className=\"cards\">\n          <div className=\"card\">\n            {MasterChart(\n              \"First Dose\",\n              countries.map((c) => ({\n                name: c,\n                data: chartData(data, \"peopleVaccinated\", c, population[c]),\n              }))\n            )}\n          </div>\n          <div className=\"card\">\n            {MasterChart(\n              \"Fully Vaccinated\",\n              countries.map((c) => ({\n                name: c,\n                data: chartData(\n                  data,\n                  \"peopleFullyVaccinated\",\n                  c,\n                  population[c]\n                ),\n              }))\n            )}\n          </div>\n        </div>\n      </div>\n\n      <div style={{ marginBottom: 50 }}>\n        <Typography variant=\"h5\" component=\"h2\" gutterBottom>\n          Canada / Ontario / Ottawa\n        </Typography>\n\n        <div className=\"cards\">\n          <div className=\"card\">\n            {MasterChart(\n              \"First Dose\",\n              local.map((c) => ({\n                name: c,\n                data: chartData(data, \"peopleVaccinated\", c, population[c]),\n              }))\n            )}\n          </div>\n          <div className=\"card\">\n            {MasterChart(\n              \"Fully Vaccinated\",\n              local.map((c) => ({\n                name: c,\n                data: chartData(\n                  data,\n                  \"peopleFullyVaccinated\",\n                  c,\n                  population[c]\n                ),\n              }))\n            )}\n          </div>\n        </div>\n      </div>\n\n      {MasterChart(\n        \"New cases this week per 100,000\",\n        [\"Canada\", \"Ontario\", \"Ottawa\"].map((c) => ({\n          name: c.startsWith(\"Ottawa\") ? \"Ottawa\" : c,\n          data: chartData(\n            data,\n            \"changeCasesPastWeek\",\n            c,\n            population[c],\n            0,\n            100000\n          ),\n        })),\n        1,\n        \"number\"\n      )}\n    </div>\n  );\n}\n\nexport default AllCharts;\n","// import \"./App.css\";\nimport AllCharts from \"./AllCharts\";\nimport Typography from \"@material-ui/core/Typography\";\n\nfunction App() {\n  return (\n    <div style={{ textAlign: \"center\" }}>\n      <Typography variant=\"h4\" component=\"h1\">\n        Ottawa Covid Statistics\n      </Typography>\n\n      <div style={{ margin: 50 }} className=\"App\">\n        <AllCharts />\n      </div>\n\n      <Typography varient=\"body1\">\n        Data from{\" \"}\n        <a href=\"https://github.com/owid/covid-19-data\">Our World in Data</a>\n        {\" and \"}\n        <a href=\"https://api.covid19tracker.ca\">COVID-19 Tracker Canada</a>\n      </Typography>\n      <br />\n      <Typography varient=\"body1\">\n        Code in <a href=\"https://github.com/sastels/first-dose\">Github</a>\n      </Typography>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
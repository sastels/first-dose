{"version":3,"sources":["mungingUtils.js","MasterChart.js","Tables.js","AllCharts.js","App.js","reportWebVitals.js","index.js"],"names":["exports","chartData","data","dataField","area","population","startDate","scale","country_data","munged","key","x","date","push","MasterChart","title","series","precision","type","max","options","plotOptions","line","marker","enabled","tooltip","shared","formatter","yourDate","Date","this","offset","getTimezoneOffset","retval","getTime","toISOString","split","points","map","name","y","toFixed","join","chart","zoomType","resetZoomButton","position","align","text","xAxis","yAxis","linkedTo","opposite","style","boxShadow","highcharts","Highcharts","DoseTable","props","keys","TableContainer","Table","size","TableHead","TableRow","TableCell","TableBody","slice","peopleVaccinated","changePeopleVaccinatedPastWeek","peopleFullyVaccinated","changePeopleFullyVaccinatedPastWeek","hospitalized","changeHospitalized","icu","changeICU","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","Canada","Ontario","Ottawa","lastUpdated","lastDate","Math","substring","AllCharts","useState","canadaData","setCanadaData","ontarioData","setOntarioData","ottawaData","setOttawaData","updated","setUpdated","getCanadaData","a","storage","storageRef","ref","child","getDownloadURL","url","xhr","XMLHttpRequest","responseType","onload","response","open","send","getOntarioData","getOttawaData","useEffect","local","some","k","marginBottom","Typography","variant","component","className","gutterBottom","c","startsWith","App","textAlign","margin","varient","href","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1a040d8e.chunk.js","sourcesContent":["const chartData = (\n  data,\n  dataField,\n  area,\n  population,\n  startDate = 1608422400000, // 2020-12-20\n  scale = 100\n) => {\n  const country_data = data[area] || {};\n  var munged = [];\n  for (const key in country_data) {\n    if (country_data[key] !== null) {\n      const x = country_data[key];\n      if (x.date >= startDate) {\n        munged.push([x.date, (x[dataField] * scale) / population]);\n      }\n    }\n  }\n  return munged;\n};\n\nexports.chartData = chartData;\n","import Highcharts from \"highcharts\";\nimport HighchartsReact from \"highcharts-react-official\";\nimport React from \"react\";\n\nfunction MasterChart(title, series, precision = 1, type = \"percent\", max=null) {\n  const options = {\n    plotOptions: {\n      line: {\n        marker: {\n          enabled: false,\n        },\n      },\n    },\n    tooltip: {\n      shared: true,\n      formatter: function () {\n        var yourDate = new Date(this.x);\n        const offset = yourDate.getTimezoneOffset();\n        yourDate = new Date(yourDate.getTime() + offset * 60 * 1000);\n        const date = yourDate.toISOString().split(\"T\")[0];\n        var retval = date + \"<br>\";\n        retval += this.points\n          .map(\n            (x) =>\n              `${x.series.name}: ${x.y.toFixed(precision)}` +\n              (type === \"percent\" ? \"%\" : \"\")\n          )\n          .join(\"<br>\");\n        return retval;\n      },\n    },\n    chart: {\n      zoomType: \"x\",\n      resetZoomButton: {\n        position: {\n          align: \"left\",\n          y: -40,\n        },\n      },\n    },\n    title: {\n      text: title,\n    },\n    xAxis: {\n      type: \"datetime\",\n    },\n    yAxis: [\n      {\n        title: {\n          text: type === \"percent\" ? \"Percentage covered\" : \"\",\n        },\n        max,\n      },\n      {\n        title: {\n          text: \" \",\n        },\n        linkedTo: 0,\n        opposite: true,\n      },\n    ],\n    series: series,\n  };\n  return (\n    <div style={{ boxShadow: \"0 0 3px #ddd\" }}>\n      <HighchartsReact highcharts={Highcharts} options={options} />\n    </div>\n  );\n}\n\nexport default MasterChart;\n","import Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\n\nconst DoseTable = (props) => {\n  var { data, keys, population } = props;\n\n  return (\n    <TableContainer>\n      <Table size=\"small\">\n        <TableHead>\n          <TableRow>\n            <TableCell></TableCell>\n            <TableCell>First dose</TableCell>\n            <TableCell>Fully vaccinated</TableCell>\n            <TableCell>Hospitalized</TableCell>\n            <TableCell>ICU</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {keys.map(\n            (key) =>\n              data[key] && (\n                <TableRow key={key}>\n                  <TableCell>{key}</TableCell>\n                  <TableCell>\n                    {(\n                      (data[key].slice(-1)[0].peopleVaccinated * 100) /\n                      population[key]\n                    ).toFixed(1)}{\" \"}\n                    % (+\n                    {(\n                      (data[key].slice(-1)[0].changePeopleVaccinatedPastWeek * 100) /\n                      population[key]\n                    ).toFixed(1)}{\" \"}\n                    %)\n                  </TableCell>\n                  <TableCell>\n                    {(\n                      (data[key].slice(-1)[0].peopleFullyVaccinated * 100) /\n                      population[key]\n                    ).toFixed(1)}{\" \"}\n                    % (+\n                    {(\n                      (data[key].slice(-1)[0].changePeopleFullyVaccinatedPastWeek * 100) /\n                      population[key]\n                    ).toFixed(1)}{\" \"}\n                    %)\n                  </TableCell>\n                  <TableCell>\n                    {(\n                      (data[key].slice(-1)[0].hospitalized)\n                    ).toFixed(0)}{\" \"}\n                    (+\n                    {(\n                      (data[key].slice(-1)[0].changeHospitalized)\n                    ).toFixed(0)}\n                    )\n                  </TableCell>\n\n                  <TableCell>\n                    {(\n                      (data[key].slice(-1)[0].icu)\n                    ).toFixed(0)}{\" \"}\n                    (+\n                    {(\n                      (data[key].slice(-1)[0].changeICU)\n                    ).toFixed(0)}\n                    )\n                  </TableCell>\n                </TableRow>\n              )\n          )}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  );\n};\n\nexport default DoseTable;\n","import \"./AllCharts.css\";\nimport React, { useState, useEffect } from \"react\";\nimport firebase from \"firebase/app\";\nimport \"firebase/storage\";\nimport MasterChart from \"./MasterChart\";\nimport { chartData } from \"./mungingUtils\";\nimport DoseTable from \"./Tables\";\nimport Typography from \"@material-ui/core/Typography\";\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyCYOlqH5i8Q_nN_5i91JvUY3qU4Blan9Uo\",\n  authDomain: \"first-dose-eb9bd.firebaseapp.com\",\n  projectId: \"first-dose-eb9bd\",\n  storageBucket: \"first-dose-eb9bd.appspot.com\",\n  messagingSenderId: \"212541290476\",\n  appId: \"1:212541290476:web:03a13b63cb5280de87b2c9\",\n  measurementId: \"G-2CY2T47KWQ\",\n};\nfirebase.initializeApp(firebaseConfig);\n\nconst population = {\n  Canada: 38131204, // estimate from covid19tracker.ca\n  Ontario: 14789821, // estimate from covid19tracker.ca\n  Ottawa: 1045022 // was 1057022 // estimate from OPH vaccination dashboard\n};\n\n\nconst lastUpdated = (data) => {\n  var lastDate = null;\n  const country = \"Canada\";\n  const country_data = data[country] || {};\n  for (const key in country_data) {\n    if (country_data[key] !== null) {\n      const x = country_data[key];\n      lastDate = lastDate ? Math.max(lastDate, x.date) : x.date;\n    }\n  }\n  lastDate = new Date(lastDate);\n  return lastDate.toISOString().substring(0, 10);\n};\n\nfunction AllCharts() {\n  const [canadaData, setCanadaData] = useState([]);\n  const [ontarioData, setOntarioData] = useState([]);\n  const [ottawaData, setOttawaData] = useState([]);\n  const [updated, setUpdated] = useState([]);\n\n  const getCanadaData = async () => {\n    const storage = firebase.storage();\n    const storageRef = storage.ref();\n    const url = await storageRef\n      .child(\"covid19_tracker_canada.json\")\n      .getDownloadURL();\n    var xhr = new XMLHttpRequest();\n    xhr.responseType = \"json\";\n    xhr.onload = async () => {\n      var data = await xhr.response;\n      setCanadaData(data);\n      setUpdated(lastUpdated(data));\n    };\n    xhr.open(\"GET\", url);\n    xhr.send();\n  };\n\n  const getOntarioData = async () => {\n    const storage = firebase.storage();\n    const storageRef = storage.ref();\n    const url = await storageRef\n      .child(\"covid19_tracker_on.json\")\n      .getDownloadURL();\n    var xhr = new XMLHttpRequest();\n    xhr.responseType = \"json\";\n    xhr.onload = async () => {\n      var data = await xhr.response;\n      setOntarioData(data);\n    };\n    xhr.open(\"GET\", url);\n    xhr.send();\n  };\n\n  const getOttawaData = async () => {\n    const storage = firebase.storage();\n    const storageRef = storage.ref();\n    const url = await storageRef\n      .child(\"covid19_tracker_ottawa.json\")\n      .getDownloadURL();\n    var xhr = new XMLHttpRequest();\n    xhr.responseType = \"json\";\n    xhr.onload = async () => {\n      var data = await xhr.response;\n      setOttawaData(data);\n    };\n    xhr.open(\"GET\", url);\n    xhr.send();\n  };\n\n  useEffect(() => {\n    getCanadaData();\n    getOntarioData();\n    getOttawaData();\n  }, []);\n\n  const data = {\n    ...canadaData,\n    ...ontarioData,\n    ...ottawaData,\n  };\n\n  const local = [\"Canada\", \"Ontario\", \"Ottawa\"];\n\n  if ([...local].some((k) => !(k in data))) {\n    return \"\";\n  }\n\n  // const compareFunction = (a, b) => {\n  //   let aV = data[a].slice(-1)[0].peopleVaccinated / population[a];\n  //   let bV = data[b].slice(-1)[0].peopleVaccinated / population[b];\n  //   if (aV < bV) return 1;\n  //   else if (bV < aV) return -1;\n  //   else return 0;\n  // };\n\n  return (\n    <div>\n      <div style={{ marginBottom: 50 }}>\n        <Typography variant=\"h5\" component=\"h2\">\n          Current and week over week ({updated})\n        </Typography>\n        <div className=\"card\">\n          <DoseTable data={data} keys={local} population={population} />\n        </div>\n      </div>\n\n      <div style={{ marginBottom: 50 }}>\n        <Typography variant=\"h5\" component=\"h2\" gutterBottom>\n          Canada / Ontario / Ottawa\n        </Typography>\n\n        <div className=\"cards\">\n          <div className=\"card\">\n            {MasterChart(\n              \"First dose\",\n              local.map((c) => ({\n                name: c,\n                data: chartData(data, \"peopleVaccinated\", c, population[c]),\n              })),\n              1,\n              \"percent\",\n              null\n            )}\n          </div>\n\n          <div className=\"card\">\n            {MasterChart(\n              \"Fully vaccinated\",\n              local.map((c) => ({\n                name: c,\n                data: chartData(\n                  data,\n                  \"peopleFullyVaccinated\",\n                  c,\n                  population[c]\n                ),\n              })),\n              1,\n              \"percent\",\n              null\n            )}\n          </div>\n\n          <div className=\"card\">\n            {MasterChart(\n              \"Weekly increase first dose\",\n              local.map((c) => ({\n                name: c,\n                data: chartData(\n                  data,\n                  \"changePeopleVaccinatedPastWeek\",\n                  c,\n                  population[c]\n                ),\n              })),\n              1,\n              \"percent\",\n              null\n            )}\n          </div>\n\n          <div className=\"card\">\n            {MasterChart(\n              \"Weekly increase fully vaccinated\",\n              local.map((c) => ({\n                name: c,\n                data: chartData(\n                  data,\n                  \"changePeopleFullyVaccinatedPastWeek\",\n                  c,\n                  population[c]\n                ),\n              })),\n              1,\n              \"percent\",\n              null\n            )}\n          </div>\n        </div>\n      </div>\n\n      {MasterChart(\n        \"New cases this week per 100,000\",\n        [\"Canada\", \"Ontario\", \"Ottawa\"].map((c) => ({\n          name: c.startsWith(\"Ottawa\") ? \"Ottawa\" : c,\n          data: chartData(\n            data,\n            \"changeCasesPastWeek\",\n            c,\n            population[c],\n            0,\n            100000\n          ),\n        })),\n        1,\n        \"number\"\n      )}\n\n      <div className=\"cards\">\n        <div className=\"card\">\n          {MasterChart(\n            \"Hospitalized\",\n            local.map((c) => ({\n              name: c,\n              data: chartData(data, \"hospitalized\", c, population[c], 0, 100000),\n            })),\n            1,\n            \"number\",\n            null\n          )}\n        </div>\n\n        <div className=\"card\">\n          {MasterChart(\n            \"ICU\",\n            local.map((c) => ({\n              name: c,\n              data: chartData(\n                data,\n                \"icu\",\n                c,\n                population[c],\n                0,\n                100000\n              ),\n            })),\n            1,\n            \"number\",\n            null\n          )}\n        </div>\n      </div>\n\n    </div>\n  );\n}\n\nexport default AllCharts;\n","// import \"./App.css\";\nimport AllCharts from \"./AllCharts\";\nimport Typography from \"@material-ui/core/Typography\";\n\nfunction App() {\n  return (\n    <div style={{ textAlign: \"center\" }}>\n      <Typography variant=\"h4\" component=\"h1\">\n        Ottawa Covid Statistics\n      </Typography>\n\n      <div style={{ margin: 50 }} className=\"App\">\n        <AllCharts />\n      </div>\n\n      <Typography varient=\"body1\">\n        Data from <a href=\"https://api.covid19tracker.ca\">COVID-19 Tracker Canada</a>\n      </Typography>\n      <br />\n      <Typography varient=\"body1\">\n        Code in <a href=\"https://github.com/sastels/first-dose\">Github</a>\n      </Typography>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
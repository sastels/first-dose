{"version":3,"sources":["MasterChart.js","Tables.js","AllCharts.js","App.js","reportWebVitals.js","index.js","mungingUtils.js"],"names":["MasterChart","data","title","series","precision","type","options","plotOptions","line","marker","enabled","tooltip","shared","formatter","yourDate","Date","this","x","offset","getTimezoneOffset","retval","getTime","toISOString","split","points","map","name","y","toFixed","join","chart","zoomType","text","xAxis","yAxis","linkedTo","opposite","highcharts","Highcharts","DoseTable","props","keys","population","sort","a","b","slice","peopleVaccinated","key","peopleFullyVaccinated","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","Israel","Canada","Ontario","Ottawa","OttawaOPH","lastUpdated","lastDate","country_data","Math","max","date","substring","AllCharts","useState","ourWorldData","setOurWorldData","ontarioData","setOntarioData","ottawaData","setOttawaData","ophData","setOphData","updated","setUpdated","getOurWorldData","storage","storageRef","ref","child","getDownloadURL","url","xhr","XMLHttpRequest","responseType","onload","response","open","send","getOntarioData","getOttawaData","getOPHData","useEffect","countries","local","className","class","c","chartData","startsWith","App","style","textAlign","margin","href","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","exports","dataField","area","startDate","scale","munged","push"],"mappings":"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","file":"static/js/main.b4fbb46f.chunk.js","sourcesContent":["import Highcharts from \"highcharts\";\nimport HighchartsReact from \"highcharts-react-official\";\nimport React from \"react\";\n\nfunction MasterChart(data, title, series, precision = 1, type = \"percent\") {\n  const options = {\n    plotOptions: {\n      line: {\n        marker: {\n          enabled: false,\n        },\n      },\n    },\n    tooltip: {\n      shared: true,\n      formatter: function () {\n        var yourDate = new Date(this.x);\n        const offset = yourDate.getTimezoneOffset();\n        yourDate = new Date(yourDate.getTime() + offset * 60 * 1000);\n        const date = yourDate.toISOString().split(\"T\")[0];\n        var retval = date + \"<br>\";\n        retval += this.points\n          .map(\n            (x) =>\n              `${x.series.name}: ${x.y.toFixed(precision)}` +\n              (type === \"percent\" ? \"%\" : \"\")\n          )\n          .join(\"<br>\");\n        return retval;\n      },\n    },\n    chart: {\n      zoomType: \"x\",\n    },\n    title: {\n      text: title,\n    },\n    xAxis: {\n      type: \"datetime\",\n    },\n    yAxis: [\n      {\n        title: {\n          text: type === \"percent\" ? \"Percentage covered\" : \"\",\n        },\n      },\n      {\n        title: {\n          text: \" \",\n        },\n        linkedTo: 0,\n        opposite: true,\n      },\n    ],\n    series: series,\n  };\n  return <HighchartsReact highcharts={Highcharts} options={options} />;\n}\n\nexport default MasterChart;\n","import \"./Tables.css\";\n\nconst DoseTable = (props) => {\n  const { data, keys, population } = props;\n\n  return (\n    <table>\n      <thead>\n        <tr>\n          <th></th>\n          <th>First Dose</th>\n          <th>Fully Vaccinated</th>\n        </tr>\n      </thead>\n      <tbody>\n        {keys\n          .sort(\n            (a, b) =>\n              data[a] &&\n              data[b] &&\n              data[a].slice(-1)[0].peopleVaccinated / population[a] <\n                data[b].slice(-1)[0].peopleVaccinated / population[b]\n          )\n          .map(\n            (key) =>\n              data[key] && (\n                <tr key={key}>\n                  <td>{key}</td>\n                  <td>\n                    {(\n                      (data[key].slice(-1)[0].peopleVaccinated * 100) /\n                      population[key]\n                    ).toFixed(1)}{\" \"}\n                    %\n                  </td>\n                  <td>\n                    {(\n                      (data[key].slice(-1)[0].peopleFullyVaccinated * 100) /\n                      population[key]\n                    ).toFixed(1)}{\" \"}\n                    %\n                  </td>\n                </tr>\n              )\n          )}\n      </tbody>\n    </table>\n  );\n};\n\nexport default DoseTable;\n","import \"./AllCharts.css\";\nimport React, { useState, useEffect } from \"react\";\nimport firebase from \"firebase/app\";\nimport \"firebase/storage\";\nimport MasterChart from \"./MasterChart\";\nimport { chartData } from \"./mungingUtils\";\nimport DoseTable from \"./Tables\";\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyCYOlqH5i8Q_nN_5i91JvUY3qU4Blan9Uo\",\n  authDomain: \"first-dose-eb9bd.firebaseapp.com\",\n  projectId: \"first-dose-eb9bd\",\n  storageBucket: \"first-dose-eb9bd.appspot.com\",\n  messagingSenderId: \"212541290476\",\n  appId: \"1:212541290476:web:03a13b63cb5280de87b2c9\",\n  measurementId: \"G-2CY2T47KWQ\",\n};\nfirebase.initializeApp(firebaseConfig);\n\nconst population = {\n  Israel: 8652167,\n  \"United Kingdom\": 67893379,\n  \"United States\": 334438269,\n  Canada: 37746527,\n  Ontario: 14745040,\n  Ottawa: 1060658,\n  OttawaOPH: 1060658,\n};\n\nconst lastUpdated = (data) => {\n  var lastDate = null;\n  const country = \"Canada\";\n  const country_data = data[country] || {};\n  for (const key in country_data) {\n    if (country_data[key] !== null) {\n      const x = country_data[key];\n      lastDate = lastDate ? Math.max(lastDate, x.date) : x.date;\n    }\n  }\n  lastDate = new Date(lastDate);\n  return lastDate.toISOString().substring(0, 10);\n};\n\nfunction AllCharts() {\n  const [ourWorldData, setOurWorldData] = useState([]);\n  const [ontarioData, setOntarioData] = useState([]);\n  const [ottawaData, setOttawaData] = useState([]);\n  const [ophData, setOphData] = useState([]);\n  const [updated, setUpdated] = useState([]);\n\n  const getOurWorldData = async () => {\n    const storage = firebase.storage();\n    const storageRef = storage.ref();\n    const url = await storageRef.child(\"ourWorldInData.json\").getDownloadURL();\n    var xhr = new XMLHttpRequest();\n    xhr.responseType = \"json\";\n    xhr.onload = async () => {\n      var data = await xhr.response;\n      setOurWorldData(data);\n      setUpdated(lastUpdated(data));\n    };\n    xhr.open(\"GET\", url);\n    xhr.send();\n  };\n\n  const getOntarioData = async () => {\n    const storage = firebase.storage();\n    const storageRef = storage.ref();\n    const url = await storageRef\n      .child(\"covid19_tracker_on.json\")\n      .getDownloadURL();\n    var xhr = new XMLHttpRequest();\n    xhr.responseType = \"json\";\n    xhr.onload = async () => {\n      var data = await xhr.response;\n      setOntarioData(data);\n    };\n    xhr.open(\"GET\", url);\n    xhr.send();\n  };\n\n  const getOttawaData = async () => {\n    const storage = firebase.storage();\n    const storageRef = storage.ref();\n    const url = await storageRef\n      .child(\"covid19_tracker_ottawa.json\")\n      .getDownloadURL();\n    var xhr = new XMLHttpRequest();\n    xhr.responseType = \"json\";\n    xhr.onload = async () => {\n      var data = await xhr.response;\n      setOttawaData(data);\n    };\n    xhr.open(\"GET\", url);\n    xhr.send();\n  };\n\n  const getOPHData = async () => {\n    const storage = firebase.storage();\n    const storageRef = storage.ref();\n    const url = await storageRef.child(\"openOttawa.json\").getDownloadURL();\n    var xhr = new XMLHttpRequest();\n    xhr.responseType = \"json\";\n    xhr.onload = async () => {\n      var data = await xhr.response;\n      setOphData({ OttawaOPH: data.Ottawa });\n    };\n    xhr.open(\"GET\", url);\n    xhr.send();\n  };\n\n  useEffect(() => {\n    getOurWorldData();\n    getOntarioData();\n    getOttawaData();\n    getOPHData();\n  }, []);\n\n  const data = {\n    ...ourWorldData,\n    ...ontarioData,\n    ...ottawaData,\n    ...ophData,\n  };\n\n  const countries = [\"Israel\", \"United Kingdom\", \"United States\", \"Canada\"];\n  const local = [\"Canada\", \"Ontario\", \"Ottawa\"];\n\n  return (\n    <div className=\"App\">\n      <h2>Latest ({updated})</h2>\n      <div class=\"cards\">\n        <div class=\"card\">\n          <DoseTable data={data} keys={countries} population={population} />\n        </div>\n        <div class=\"card\">\n          <DoseTable data={data} keys={local} population={population} />\n        </div>\n      </div>\n\n      <h2>Countries</h2>\n      <div class=\"cards\">\n        <div class=\"card\">\n          {MasterChart(\n            data,\n            \"First Dose\",\n            countries.map((c) => ({\n              name: c,\n              data: chartData(data, \"peopleVaccinated\", c, population[c]),\n            }))\n          )}\n        </div>\n        <div class=\"card\">\n          {MasterChart(\n            data,\n            \"Fully Vaccinated\",\n            countries.map((c) => ({\n              name: c,\n              data: chartData(data, \"peopleFullyVaccinated\", c, population[c]),\n            }))\n          )}\n        </div>\n      </div>\n\n      <h2>Canada / Ontario / Ottawa</h2>\n\n      <div class=\"cards\">\n        <div class=\"card\">\n          {MasterChart(\n            data,\n            \"First Dose\",\n            local.map((c) => ({\n              name: c,\n              data: chartData(data, \"peopleVaccinated\", c, population[c]),\n            }))\n          )}\n        </div>\n        <div class=\"card\">\n          {MasterChart(\n            data,\n            \"Fully Vaccinated\",\n            local.map((c) => ({\n              name: c,\n              data: chartData(data, \"peopleFullyVaccinated\", c, population[c]),\n            }))\n          )}\n        </div>\n      </div>\n\n      {MasterChart(\n        data,\n        \"Active cases per 100,000\",\n        [\"Ontario\", \"OttawaOPH\"].map((c) => ({\n          name: c.startsWith(\"Ottawa\") ? \"Ottawa\" : c,\n          data: chartData(data, \"activeCases\", c, population[c], 0, 100000),\n        })),\n        0,\n        \"number\"\n      )}\n\n      <p> Data last updated at {updated}</p>\n    </div>\n  );\n}\n\nexport default AllCharts;\n","import \"./App.css\";\nimport AllCharts from \"./AllCharts\";\n\nfunction App() {\n  return (\n    <div style={{ textAlign: \"center\" }}>\n      <div style={{ margin: 50 }} className=\"App\">\n        <AllCharts />\n      </div>\n      <p>\n        Data from{\" \"}\n        <a href=\"https://github.com/owid/covid-19-data\">Our World in Data</a>,{\" \"}\n        <a href=\"https://api.covid19tracker.ca\">COVID-19 Tracker Canada</a>,\n        {\" and \"}\n        <a href=\"https://open.ottawa.ca/\">Open Ottawa</a>.\n      </p>\n      <p>\n        Code in <a href=\"https://github.com/sastels/first-dose\">Github</a>.\n      </p>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","const chartData = (\n  data,\n  dataField,\n  area,\n  population,\n  startDate = 1608422400000, // 2020-12-20\n  scale = 100\n) => {\n  const country_data = data[area] || {};\n  var munged = [];\n  for (const key in country_data) {\n    if (country_data[key] !== null) {\n      const x = country_data[key];\n      if (x.date >= startDate) {\n        munged.push([x.date, (x[dataField] * scale) / population]);\n      }\n    }\n  }\n  return munged;\n};\n\nexports.chartData = chartData;\n"],"sourceRoot":""}
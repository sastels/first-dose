{"version":3,"sources":["mungingUtils.js","MasterChart.js","Tables.js","AllCharts.js","App.js","reportWebVitals.js","index.js"],"names":["exports","chartData","data","dataField","area","population","startDate","scale","country_data","munged","key","x","date","push","MasterChart","title","series","precision","type","max","options","plotOptions","line","marker","enabled","tooltip","shared","formatter","yourDate","Date","this","offset","getTimezoneOffset","retval","getTime","toISOString","split","points","map","name","y","toFixed","join","chart","zoomType","resetZoomButton","position","align","text","xAxis","yAxis","linkedTo","opposite","style","boxShadow","highcharts","Highcharts","DoseTable","props","keys","TableContainer","Table","size","TableHead","TableRow","TableCell","TableBody","slice","peopleVaccinated","changePeopleVaccinatedPastWeek","peopleFullyVaccinated","changePeopleFullyVaccinatedPastWeek","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","Israel","Canada","Ontario","Ottawa","eligiblePopulation","lastUpdated","lastDate","Math","substring","AllCharts","useState","ourWorldData","setOurWorldData","canadaData","setCanadaData","ontarioData","setOntarioData","ottawaData","setOttawaData","updated","setUpdated","onlyEligible","setOnlyEligible","getOurWorldData","a","storage","storageRef","ref","child","getDownloadURL","url","xhr","XMLHttpRequest","responseType","onload","response","open","send","getCanadaData","getOntarioData","getOttawaData","useEffect","countries","local","some","k","sort","b","aV","bV","marginBottom","Typography","variant","component","className","FormControlLabel","control","Switch","checked","onChange","event","target","color","label","c","gutterBottom","startsWith","App","textAlign","margin","varient","href","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4a709d3d.chunk.js","sourcesContent":["const chartData = (\n  data,\n  dataField,\n  area,\n  population,\n  startDate = 1608422400000, // 2020-12-20\n  scale = 100\n) => {\n  const country_data = data[area] || {};\n  var munged = [];\n  for (const key in country_data) {\n    if (country_data[key] !== null) {\n      const x = country_data[key];\n      if (x.date >= startDate) {\n        munged.push([x.date, (x[dataField] * scale) / population]);\n      }\n    }\n  }\n  return munged;\n};\n\nexports.chartData = chartData;\n","import Highcharts from \"highcharts\";\nimport HighchartsReact from \"highcharts-react-official\";\nimport React from \"react\";\n\nfunction MasterChart(title, series, precision = 1, type = \"percent\", max=null) {\n  const options = {\n    plotOptions: {\n      line: {\n        marker: {\n          enabled: false,\n        },\n      },\n    },\n    tooltip: {\n      shared: true,\n      formatter: function () {\n        var yourDate = new Date(this.x);\n        const offset = yourDate.getTimezoneOffset();\n        yourDate = new Date(yourDate.getTime() + offset * 60 * 1000);\n        const date = yourDate.toISOString().split(\"T\")[0];\n        var retval = date + \"<br>\";\n        retval += this.points\n          .map(\n            (x) =>\n              `${x.series.name}: ${x.y.toFixed(precision)}` +\n              (type === \"percent\" ? \"%\" : \"\")\n          )\n          .join(\"<br>\");\n        return retval;\n      },\n    },\n    chart: {\n      zoomType: \"x\",\n      resetZoomButton: {\n        position: {\n          align: \"left\",\n          y: -40,\n        },\n      },\n    },\n    title: {\n      text: title,\n    },\n    xAxis: {\n      type: \"datetime\",\n    },\n    yAxis: [\n      {\n        title: {\n          text: type === \"percent\" ? \"Percentage covered\" : \"\",\n        },\n        max,\n      },\n      {\n        title: {\n          text: \" \",\n        },\n        linkedTo: 0,\n        opposite: true,\n      },\n    ],\n    series: series,\n  };\n  return (\n    <div style={{ boxShadow: \"0 0 3px #ddd\" }}>\n      <HighchartsReact highcharts={Highcharts} options={options} />\n    </div>\n  );\n}\n\nexport default MasterChart;\n","import Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\n\nconst DoseTable = (props) => {\n  var { data, keys, population } = props;\n\n  return (\n    <TableContainer>\n      <Table size=\"small\">\n        <TableHead>\n          <TableRow>\n            <TableCell></TableCell>\n            <TableCell>First dose</TableCell>\n            <TableCell>Fully vaccinated</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {keys.map(\n            (key) =>\n              data[key] && (\n                <TableRow key={key}>\n                  <TableCell>{key}</TableCell>\n                  <TableCell>\n                    {(\n                      (data[key].slice(-1)[0].peopleVaccinated * 100) /\n                      population[key]\n                    ).toFixed(1)}{\" \"}\n                    % (+\n                      {(\n                      (data[key].slice(-1)[0].changePeopleVaccinatedPastWeek * 100) /\n                      population[key]\n                    ).toFixed(1)}{\" \"}\n                    %)\n                  </TableCell>\n                  <TableCell>\n                    {(\n                      (data[key].slice(-1)[0].peopleFullyVaccinated * 100) /\n                      population[key]\n                    ).toFixed(1)}{\" \"}\n                    % (+\n                      {(\n                      (data[key].slice(-1)[0].changePeopleFullyVaccinatedPastWeek * 100) /\n                      population[key]\n                    ).toFixed(1)}{\" \"}\n                    %)\n                  </TableCell>\n                </TableRow>\n              )\n          )}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  );\n};\n\nexport default DoseTable;\n","import \"./AllCharts.css\";\nimport React, { useState, useEffect } from \"react\";\nimport firebase from \"firebase/app\";\nimport \"firebase/storage\";\nimport MasterChart from \"./MasterChart\";\nimport { chartData } from \"./mungingUtils\";\nimport DoseTable from \"./Tables\";\nimport Typography from \"@material-ui/core/Typography\";\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Switch from '@material-ui/core/Switch';\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyCYOlqH5i8Q_nN_5i91JvUY3qU4Blan9Uo\",\n  authDomain: \"first-dose-eb9bd.firebaseapp.com\",\n  projectId: \"first-dose-eb9bd\",\n  storageBucket: \"first-dose-eb9bd.appspot.com\",\n  messagingSenderId: \"212541290476\",\n  appId: \"1:212541290476:web:03a13b63cb5280de87b2c9\",\n  measurementId: \"G-2CY2T47KWQ\",\n};\nfirebase.initializeApp(firebaseConfig);\n\nconst population = {\n  Israel: 8652167,\n  \"United Kingdom\": 67893379,\n  \"United States\": 334438269,\n  Canada: 38131204, // estimate from covid19tracker.ca\n  Ontario: 14789821, // estimate from covid19tracker.ca\n  Ottawa: 1057022 // was 1057022 // estimate from OPH vaccination dashboard\n};\n\n/*\n2016 Census\nCanada: 35,151,725\n0 - 11: 4689950 = 1,898,790 + 2,018,130 + 389,160 + 383,870\n12+: 0.86657980511\n\nOntario: 13,448,495\n0 - 11: 1754810 =  697,360 + 756,085 + 150,380 + 150,985\n12+: 0.86951625442\n\nOttawa: 991,725\n0-11: 131900 = 51,980 + 57,335 + 11,185 + 11,400\n12+: 0.8669994202\n*/\nconst eligiblePopulation = {\n  Canada: 0.87157980511 * population.Canada,\n  Ontario: 0.87451625442 * population.Ontario,\n  Ottawa: 0.8809994202 * population.Ottawa\n};\n\n\nconst lastUpdated = (data) => {\n  var lastDate = null;\n  const country = \"Canada\";\n  const country_data = data[country] || {};\n  for (const key in country_data) {\n    if (country_data[key] !== null) {\n      const x = country_data[key];\n      lastDate = lastDate ? Math.max(lastDate, x.date) : x.date;\n    }\n  }\n  lastDate = new Date(lastDate);\n  return lastDate.toISOString().substring(0, 10);\n};\n\nfunction AllCharts() {\n  const [ourWorldData, setOurWorldData] = useState([]);\n  const [canadaData, setCanadaData] = useState([]);\n  const [ontarioData, setOntarioData] = useState([]);\n  const [ottawaData, setOttawaData] = useState([]);\n  const [updated, setUpdated] = useState([]);\n  const [onlyEligible, setOnlyEligible] = useState(true);\n\n  const getOurWorldData = async () => {\n    const storage = firebase.storage();\n    const storageRef = storage.ref();\n    const url = await storageRef.child(\"ourWorldInData.json\").getDownloadURL();\n    var xhr = new XMLHttpRequest();\n    xhr.responseType = \"json\";\n    xhr.onload = async () => {\n      var data = await xhr.response;\n      setOurWorldData(data);\n      setUpdated(lastUpdated(data));\n    };\n    xhr.open(\"GET\", url);\n    xhr.send();\n  };\n\n  const getCanadaData = async () => {\n    const storage = firebase.storage();\n    const storageRef = storage.ref();\n    const url = await storageRef\n      .child(\"covid19_tracker_canada.json\")\n      .getDownloadURL();\n    var xhr = new XMLHttpRequest();\n    xhr.responseType = \"json\";\n    xhr.onload = async () => {\n      var data = await xhr.response;\n      setCanadaData(data);\n    };\n    xhr.open(\"GET\", url);\n    xhr.send();\n  };\n\n  const getOntarioData = async () => {\n    const storage = firebase.storage();\n    const storageRef = storage.ref();\n    const url = await storageRef\n      .child(\"covid19_tracker_on.json\")\n      .getDownloadURL();\n    var xhr = new XMLHttpRequest();\n    xhr.responseType = \"json\";\n    xhr.onload = async () => {\n      var data = await xhr.response;\n      setOntarioData(data);\n    };\n    xhr.open(\"GET\", url);\n    xhr.send();\n  };\n\n  const getOttawaData = async () => {\n    const storage = firebase.storage();\n    const storageRef = storage.ref();\n    const url = await storageRef\n      .child(\"covid19_tracker_ottawa.json\")\n      .getDownloadURL();\n    var xhr = new XMLHttpRequest();\n    xhr.responseType = \"json\";\n    xhr.onload = async () => {\n      var data = await xhr.response;\n      setOttawaData(data);\n    };\n    xhr.open(\"GET\", url);\n    xhr.send();\n  };\n\n  useEffect(() => {\n    getOurWorldData();\n    getCanadaData();\n    getOntarioData();\n    getOttawaData();\n  }, []);\n\n  const data = {\n    ...ourWorldData,\n    ...canadaData,\n    ...ontarioData,\n    ...ottawaData,\n  };\n\n  const countries = [\"Israel\", \"United Kingdom\", \"United States\", \"Canada\"];\n  const local = [\"Canada\", \"Ontario\", \"Ottawa\"];\n\n  if ([...countries, ...local].some((k) => !(k in data))) {\n    return \"\";\n  }\n\n  const compareFunction = (a, b) => {\n    let aV = data[a].slice(-1)[0].peopleVaccinated / population[a];\n    let bV = data[b].slice(-1)[0].peopleVaccinated / population[b];\n    if (aV < bV) return 1;\n    else if (bV < aV) return -1;\n    else return 0;\n  };\n  countries.sort(compareFunction);\n\n  return (\n    <div>\n      <div style={{ marginBottom: 50 }}>\n        <Typography variant=\"h5\" component=\"h2\">\n          Coverage and week over week ({updated})\n        </Typography>\n        <div className=\"cards\">\n          <div className=\"card\">\n            <DoseTable data={data} keys={countries} population={population} />\n          </div>\n          <div className=\"card\">\n\n          <FormControlLabel\n            control={\n              <Switch\n                checked={onlyEligible}\n                onChange={event => setOnlyEligible(event.target.checked)}\n                name=\"onlyEligible\"\n                color=\"primary\"\n              />\n            }\n            label=\"12+\"\n          />\n            <DoseTable data={data} keys={local} population={onlyEligible ? eligiblePopulation : population} />\n          </div>\n        </div>\n      </div>\n\n      <div style={{ marginBottom: 50 }}>\n        <Typography variant=\"h5\" component=\"h2\">\n          Countries\n        </Typography>\n\n        <div className=\"cards\">\n          <div className=\"card\">\n            {MasterChart(\n              \"First dose\",\n              countries.map((c) => ({\n                name: c,\n                data: chartData(data, \"peopleVaccinated\", c, population[c]),\n              }))\n            )}\n          </div>\n          <div className=\"card\">\n            {MasterChart(\n              \"Fully vaccinated\",\n              countries.map((c) => ({\n                name: c,\n                data: chartData(\n                  data,\n                  \"peopleFullyVaccinated\",\n                  c,\n                  population[c]\n                ),\n              }))\n            )}\n          </div>\n        </div>\n      </div>\n\n      <div style={{ marginBottom: 50 }}>\n        <Typography variant=\"h5\" component=\"h2\" gutterBottom>\n          Canada / Ontario / Ottawa\n        </Typography>\n\n        <FormControlLabel\n            control={\n              <Switch\n                checked={onlyEligible}\n                onChange={event => setOnlyEligible(event.target.checked)}\n                name=\"onlyEligible\"\n                color=\"primary\"\n              />\n            }\n            label=\"12+\"\n          />\n\n        <div className=\"cards\">\n          <div className=\"card\">\n            {MasterChart(\n              \"First dose\",\n              local.map((c) => ({\n                name: c,\n                data: chartData(data, \"peopleVaccinated\", c, onlyEligible ? eligiblePopulation[c] : population[c]),\n              })),\n              1,\n              \"percent\",\n              onlyEligible ? 100 : null\n            )}\n          </div>\n          <div className=\"card\">\n            {MasterChart(\n              \"Fully vaccinated\",\n              local.map((c) => ({\n                name: c,\n                data: chartData(\n                  data,\n                  \"peopleFullyVaccinated\",\n                  c,\n                  onlyEligible ? eligiblePopulation[c] : population[c]\n                ),\n              })),\n              1,\n              \"percent\",\n              onlyEligible ? 100 : null\n            )}\n          </div>\n        </div>\n      </div>\n\n      {MasterChart(\n        \"New cases this week per 100,000\",\n        [\"Canada\", \"Ontario\", \"Ottawa\"].map((c) => ({\n          name: c.startsWith(\"Ottawa\") ? \"Ottawa\" : c,\n          data: chartData(\n            data,\n            \"changeCasesPastWeek\",\n            c,\n            population[c],\n            0,\n            100000\n          ),\n        })),\n        1,\n        \"number\"\n      )}\n    </div>\n  );\n}\n\nexport default AllCharts;\n","// import \"./App.css\";\nimport AllCharts from \"./AllCharts\";\nimport Typography from \"@material-ui/core/Typography\";\n\nfunction App() {\n  return (\n    <div style={{ textAlign: \"center\" }}>\n      <Typography variant=\"h4\" component=\"h1\">\n        Ottawa Covid Statistics\n      </Typography>\n\n      <div style={{ margin: 50 }} className=\"App\">\n        <AllCharts />\n      </div>\n\n      <Typography varient=\"body1\">\n        Data from{\" \"}\n        <a href=\"https://github.com/owid/covid-19-data\">Our World in Data</a>\n        {\" and \"}\n        <a href=\"https://api.covid19tracker.ca\">COVID-19 Tracker Canada</a>\n      </Typography>\n      <br />\n      <Typography varient=\"body1\">\n        Code in <a href=\"https://github.com/sastels/first-dose\">Github</a>\n      </Typography>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
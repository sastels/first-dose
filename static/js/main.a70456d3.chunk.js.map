{"version":3,"sources":["FirstDoseChart.js","FullyVaccinatedChart.js","DoseChart.js","App.js","reportWebVitals.js","index.js"],"names":["chartDataOneDose","data","country","population","country_data","munged","key","x","push","date","peopleVaccinated","FirstDoseChart","options","plotOptions","line","marker","enabled","tooltip","shared","formatter","yourDate","Date","this","offset","getTimezoneOffset","retval","getTime","toISOString","split","points","map","series","name","y","toFixed","join","chart","zoomType","title","text","xAxis","type","yAxis","linkedTo","opposite","highcharts","Highcharts","chartDataFullyVaccinated","peopleFullyVaccinated","FullyVaccinatedChart","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","lastUpdated","lastDate","Math","max","substring","DoseChart","useState","setData","updated","setUpdated","getData","a","storage","storageRef","ref","child","getDownloadURL","url","xhr","XMLHttpRequest","responseType","onload","response","open","send","useEffect","className","App","style","textAlign","margin","href","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a70456d3.chunk.js","sourcesContent":["import Highcharts from \"highcharts\";\nimport HighchartsReact from \"highcharts-react-official\";\nimport React from \"react\";\n\nconst chartDataOneDose = (data, country, population) => {\n  const country_data = data[country] || {};\n  var munged = [];\n  for (const key in country_data) {\n    if (country_data[key] !== null) {\n      const x = country_data[key];\n      munged.push([x.date, (x.peopleVaccinated * 100) / population]);\n    }\n  }\n  return munged;\n};\n\nfunction FirstDoseChart(data) {\n  const options = {\n    plotOptions: {\n      line: {\n        marker: {\n          enabled: false,\n        },\n      },\n    },\n    tooltip: {\n      shared: true,\n      formatter: function () {\n        var yourDate = new Date(this.x);\n        const offset = yourDate.getTimezoneOffset();\n        yourDate = new Date(yourDate.getTime() + offset * 60 * 1000);\n        const date = yourDate.toISOString().split(\"T\")[0];\n        var retval = date + \"<br>\";\n        retval += this.points\n          .map((x) => `${x.series.name}: ${x.y.toFixed(1)}%`)\n          .join(\"<br>\");\n        return retval;\n      },\n    },\n    chart: {\n      zoomType: \"x\",\n    },\n    title: {\n      text: \"First Dose Coverage\",\n    },\n    xAxis: {\n      type: \"datetime\",\n    },\n    yAxis: [\n      {\n        title: {\n          text: \"Percentage covered\",\n        },\n      },\n      {\n        title: {\n          text: \" \",\n        },\n        linkedTo: 0,\n        opposite: true,\n      },\n    ],\n    series: [\n      {\n        name: \"Israel\",\n        data: chartDataOneDose(data, \"Israel\", 8652167),\n      },\n      {\n        name: \"United Kingdom\",\n        data: chartDataOneDose(data, \"United Kingdom\", 67893379),\n      },\n      {\n        name: \"United States\",\n        data: chartDataOneDose(data, \"United States\", 334438269),\n      },\n      {\n        name: \"Canada\",\n        data: chartDataOneDose(data, \"Canada\", 37746527),\n      },\n    ],\n  };\n  return <HighchartsReact highcharts={Highcharts} options={options} />;\n}\n\nexport default FirstDoseChart;\n","import Highcharts from \"highcharts\";\nimport HighchartsReact from \"highcharts-react-official\";\nimport React from \"react\";\n\nconst chartDataFullyVaccinated = (data, country, population) => {\n  const country_data = data[country] || {};\n  var munged = [];\n  for (const key in country_data) {\n    if (country_data[key] !== null) {\n      const x = country_data[key];\n      munged.push([x.date, (x.peopleFullyVaccinated * 100) / population]);\n    }\n  }\n  return munged;\n};\n\nfunction FullyVaccinatedChart(data) {\n  const options = {\n    plotOptions: {\n      line: {\n        marker: {\n          enabled: false,\n        },\n      },\n    },\n    tooltip: {\n      shared: true,\n      formatter: function () {\n        var yourDate = new Date(this.x);\n        const offset = yourDate.getTimezoneOffset();\n        yourDate = new Date(yourDate.getTime() + offset * 60 * 1000);\n        const date = yourDate.toISOString().split(\"T\")[0];\n        var retval = date + \"<br>\";\n        retval += this.points\n          .map((x) => `${x.series.name}: ${x.y.toFixed(1)}%`)\n          .join(\"<br>\");\n        return retval;\n      },\n    },\n    chart: {\n      zoomType: \"x\",\n    },\n    title: {\n      text: \"Fully Vaccinated\",\n    },\n    xAxis: {\n      type: \"datetime\",\n    },\n    yAxis: [\n      {\n        title: {\n          text: \"Percentage covered\",\n        },\n      },\n      {\n        title: {\n          text: \" \",\n        },\n        linkedTo: 0,\n        opposite: true,\n      },\n    ],\n    series: [\n      {\n        name: \"Israel\",\n        data: chartDataFullyVaccinated(data, \"Israel\", 8652167),\n      },\n      {\n        name: \"United Kingdom\",\n        data: chartDataFullyVaccinated(data, \"United Kingdom\", 67893379),\n      },\n      {\n        name: \"United States\",\n        data: chartDataFullyVaccinated(data, \"United States\", 334438269),\n      },\n      {\n        name: \"Canada\",\n        data: chartDataFullyVaccinated(data, \"Canada\", 37746527),\n      },\n    ],\n  };\n  return <HighchartsReact highcharts={Highcharts} options={options} />;\n}\n\nexport default FullyVaccinatedChart;\n","import FirstDoseChart from \"./FirstDoseChart\";\nimport FullyVaccinatedChart from \"./FullyVaccinatedChart\";\nimport React, { useState, useEffect } from \"react\";\nimport firebase from \"firebase/app\";\nimport \"firebase/storage\";\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyCYOlqH5i8Q_nN_5i91JvUY3qU4Blan9Uo\",\n  authDomain: \"first-dose-eb9bd.firebaseapp.com\",\n  projectId: \"first-dose-eb9bd\",\n  storageBucket: \"first-dose-eb9bd.appspot.com\",\n  messagingSenderId: \"212541290476\",\n  appId: \"1:212541290476:web:03a13b63cb5280de87b2c9\",\n  measurementId: \"G-2CY2T47KWQ\",\n};\nfirebase.initializeApp(firebaseConfig);\n\nconst lastUpdated = (data) => {\n  var lastDate = null;\n  const country = \"Canada\";\n  const country_data = data[country] || {};\n  for (const key in country_data) {\n    if (country_data[key] !== null) {\n      const x = country_data[key];\n      lastDate = lastDate ? Math.max(lastDate, x.date) : x.date;\n    }\n  }\n  lastDate = new Date(lastDate);\n  return lastDate.toISOString().substring(0, 10);\n};\n\nfunction DoseChart() {\n  const [data, setData] = useState([]);\n  const [updated, setUpdated] = useState([]);\n\n  const getData = async () => {\n    const storage = firebase.storage();\n    const storageRef = storage.ref();\n    const url = await storageRef.child(\"ourWorldInData.json\").getDownloadURL();\n    var xhr = new XMLHttpRequest();\n    xhr.responseType = \"json\";\n    xhr.onload = async () => {\n      var data = await xhr.response;\n      setData(data);\n      setUpdated(lastUpdated(data));\n    };\n    xhr.open(\"GET\", url);\n    xhr.send();\n  };\n\n  useEffect(() => {\n    getData();\n  }, []);\n\n  return (\n    <div className=\"App\">\n      {FirstDoseChart(data)}\n      {FullyVaccinatedChart(data)}\n      <p> Data last updated at {updated}</p>\n    </div>\n  );\n}\n\nexport default DoseChart;\n","import \"./App.css\";\nimport DoseChart from \"./DoseChart\";\n\nfunction App() {\n  return (\n    <div style={{ textAlign: \"center\" }}>\n      <div style={{ margin: 50 }} className=\"App\">\n        <DoseChart />\n      </div>\n      <p>\n        Data from{\" \"}\n        <a href=\"https://github.com/owid/covid-19-data\">Our World in Data</a>.\n      </p>\n      <p>\n        Code in <a href=\"https://github.com/sastels/first-dose\">Github</a>.\n      </p>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}